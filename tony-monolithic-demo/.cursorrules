# Web 项目开发规范

## 1. 项目概述

### 1.1 核心特点
- **Kotlin 优先**：主要使用 Kotlin，兼容 Java。
- **模块化架构**：API、Service、DTO、SDK 分层设计。
- **统一规范**：严格遵循本文档定义的开发规约。

### 1.2 占位符规范

| 占位符             | 说明         | 示例             |
|-----------------|------------|----------------|
| `{company}`     | 公司/组织名（小写） | `tony`         |
| `{projectName}` | 项目名（小写）    | `demo`         |
| `{ProjectName}` | 项目名（首大写）   | `Demo`         |
| `{module}`      | 模块名（小写）    | `sys`          |
| `{Module}`      | 模块名（首大写）   | `Sys`          |
| `{entity}`      | 实体类名（小写）   | `employee`     |
| `{Entity}`      | 实体类名（首大写）  | `Employee`     |
| `{table}`       | 数据库表名（小写）  | `sys_employee` |

**包路径格式：** `{company}.{projectName}.{module}`。
**示例：** `tony.demo.sys.controller`。

---

## 2. 项目结构规范

### 2.1 标准模块结构
```
{project-name}/
├── {company}-api/              # Web 层：控制器、配置、启动类、Docker 文件
├── {company}-service/          # 业务层：服务实现、DAO、PO
├── {company}-dto/              # 数据传输：请求/响应/查询 DTO、枚举
├── {company}-sdk/              # 接口层：服务接口（可选）
├── db/                         # 数据库脚本
├── build.gradle.kts            # 根项目构建配置
├── settings.gradle.kts         # 项目设置文件
├── gradle.properties           # Gradle 属性配置
├── gradlew                     # Gradle Wrapper (Unix)
├── gradlew.bat                 # Gradle Wrapper (Windows)
├── gradle/                     # Gradle Wrapper 目录
├── README.md                   # 项目说明文档
├── .editorconfig               # 编辑器配置
├── .gitignore                  # Git 忽略文件
├── .gitattributes              # Git 属性配置
└── dockerBuild.sh              # Docker 构建脚本
```

### 2.2 包结构约定
- **API 模块：** `{company}.{projectName}.{module}.controller`。
- **Service 模块：** `{company}.{projectName}.{module}.service.impl`（实现）。
- **DTO 模块：** `{company}.{projectName}.{module}.dto.{req|resp|query|enums}`。
- **SDK 模块：** `{company}.{projectName}.{module}.service`（服务接口）。

### 2.3 核心文件结构

#### 2.3.1 API 模块文件
```
{company}-api/
├── src/main/
│   ├── kotlin/{company}/{projectName}/
│   │   ├── {ProjectName}WebApp.kt           # 主应用启动类
│   │   ├── config/                          # 配置类包
│   │   │   ├── {ProjectName}WebConfig.kt    # Web 配置类
│   │   │   └── {ProjectName}WebContext.kt   # Web 上下文常量（可选）
│   │   └── {module}/                        # 业务模块包
│   │       └── controller/                  # 控制器包
│   │           └── {Module}Controller.kt    # 控制器类
│   └── resources/
│       ├── application.yml                  # 主配置文件
│       └── logback-spring.xml               # 日志配置
├── Dockerfile                               # Docker 镜像构建文件
├── docker-compose.yml                       # Docker 编排文件
├── docker-entrypoint.sh                     # Docker 启动脚本
└── build.gradle.kts                         # 模块构建配置
```

#### 2.3.2 Service 模块文件
```
{company}-service/
├── src/main/
│   ├── kotlin/{company}/{projectName}/
│   │   └── {module}/                        # 业务模块包
│   │       ├── service/                     # 服务包
│   │       │   └── impl/                    # 服务实现包
│   │       │       └── {Module}Service.kt   # 服务实现类
│   │       ├── dao/                         # 数据访问包
│   │       │   └── {Module}Dao.kt           # 数据访问接口
│   │       └── po/                          # 持久化对象包
│   │           └── {Entity}.kt              # 持久化对象类
│   └── resources/
│       └── mappers/                         # MyBatis 映射文件目录
│           └── {Module}Dao.xml              # SQL 映射文件
└── build.gradle.kts                         # 模块构建配置
```

#### 2.3.3 DTO 模块文件
```
{company}-dto/
├── src/main/
│   └── kotlin/{company}/{projectName}/
│       └── {module}/                        # 业务模块包
│           └── dto/                         # DTO 包
│               ├── req/                     # 请求 DTO 包
│               │   └── {Entity}AddReq.kt    # 请求 DTO 类
│               ├── resp/                    # 响应 DTO 包
│               │   └── {Entity}Resp.kt      # 响应 DTO 类
│               ├── query/                   # 查询 DTO 包
│               │   └── {Entity}Query.kt     # 查询 DTO 类
│               └── enums/                   # 枚举包
│                   └── {BusinessConcept}Enum.kt # 枚举类
└── build.gradle.kts                         # 模块构建配置
```

#### 2.3.4 SDK 模块文件（可选）
```
{company}-sdk/
├── src/main/
│   └── kotlin/{company}/{projectName}/
│       └── {module}/                        # 业务模块包
│           └── service/                     # 服务接口包
│               └── I{Module}Service.kt      # 服务接口类
└── build.gradle.kts                         # 模块构建配置
```

#### 2.3.5 数据库脚本文件
```
db/
├── db.init.mysql.sql                        # 初始化用户、数据库（MySQL）
├── db.init.table.mysql.sql                  # 初始化表结构（MySQL）
└── db.init.data.mysql.sql                   # 初始化数据（MySQL）
```

---

## 3. 核心开发规范

### 3.1 注释规范
🔴 **必须**：所有公共类、方法、属性必须有注释。

```kotlin
/**
 * 功能描述
 *
 * 详细说明/使用场景
 *
 * @param [paramName] 参数说明
 * @return [ReturnType] 返回值说明
 * @throws [ExceptionType] 异常说明
 * @author 作者
 * @date 2025/07/04 14:00 （此处为生成时系统时间）
 */
```

### 3.2 导入规范
🔴 **必须**：禁止通配符导入，显式导入所有依赖。

```kotlin
import java.util.UUID
import org.springframework.web.bind.annotation.PostMapping
// ❌ import java.util.*  // 禁止
```

### 3.3 枚举规范
🔴 **必须**：所有枚举实现统一接口，支持默认值。

```kotlin
// Int 类型枚举
@Schema(description = "状态枚举")
enum class StatusEnum(override val value: Int) : IntEnumValue {
    ENABLED(1),
    DISABLED(0),

    @JsonEnumDefaultValue
    UNUSED(DEFAULT_INT_VALUE);

    companion object : IntEnumCreator(StatusEnum::class.java) {
        @JsonCreator
        @JvmStatic
        override fun create(value: Int) = super.create(value)
    }
}

// String 类型枚举
@Schema(description = "性别枚举")
enum class GenderEnum(override val value: String) : StringEnumValue {
    MALE("MALE"),
    FEMALE("FEMALE"),

    @JsonEnumDefaultValue
    UNUSED(DEFAULT_STRING_VALUE);

    companion object : StringEnumCreator(GenderEnum::class.java) {
        @JsonCreator
        @JvmStatic
        override fun create(value: String) = super.create(value)
    }
}
```

**必须**：业务字段使用枚举类型，禁止使用原始类型。

```kotlin
// ✅ 正确
var status: StatusEnum = StatusEnum.ENABLED
var gender: GenderEnum = GenderEnum.MALE

// ❌ 错误
var status: Int = 1
var gender: String = "MALE"
```

---

## 4. 数据层规范

### 4.1 实体类规范
🔴 **必须**：使用 MyBatis-Plus 注解，包含审计字段。

```kotlin
@TableName("{table}")
class {Entity} {
    @TableId
    var {entity}Id: String = ""

    // 业务字段...

    // 审计字段（标准模板）
    @OrderBy
    @TableField(insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER)
    var createTime: LocalDateTime = LocalDateTime.now()

    @MybatisPlusMetaProperty(MetaColumn.USER_ID)
    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.NEVER)
    var creatorId: String = ""

    @MybatisPlusMetaProperty(MetaColumn.USER_NAME, relativeProp = "creatorId")
    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.NEVER)
    var creatorName: String = ""

    @TableField(insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER, update = "CURRENT_TIMESTAMP")
    var updateTime: LocalDateTime = LocalDateTime.now()

    @TableField(fill = FieldFill.UPDATE, insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER)
    var updatorId: String = ""

    @TableField(fill = FieldFill.UPDATE, insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER)
    var updatorName: String = ""

    @TableLogic
    var deleteTime: LocalDateTime? = null

    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.NEVER)
    var tenantId: String = ""
}
```

### 4.2 数据库表规范
🔴 **必须**：表名小写，下划线分隔，包含审计字段。

```sql
CREATE TABLE `{table}` (
    `{table}_id` varchar(50) NOT NULL COMMENT '主键',
    -- 业务字段...
    `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `creator_id` varchar(32) NOT NULL DEFAULT '' COMMENT '创建人',
    `creator_name` varchar(30) NOT NULL DEFAULT '' COMMENT '创建人名称',
    `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    `updator_id` varchar(32) NOT NULL DEFAULT '' COMMENT '更新人',
    `updator_name` varchar(30) NOT NULL DEFAULT '' COMMENT '更新人名称',
    `delete_time` timestamp NULL DEFAULT NULL COMMENT '删除标记',
    `tenant_id` varchar(32) NOT NULL DEFAULT '' COMMENT '租户id',
    PRIMARY KEY (`{table}_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='{表说明}';
```

### 4.3 DAO 层规范
- 🔴 **必须**：继承 `tony.mybatis.dao.BaseDao`，使用 XML 映射文件。
- 🔴 **禁止**：在接口上使用 `@Select`、`@Update` 等注解。

```kotlin
import tony.mybatis.dao.BaseDao
interface {Module}Dao : BaseDao<{Entity}>
```

---

## 5. 业务层规范

### 5.1 DTO 规范
🔴 **必须**：请求/响应/查询 DTO 分离，使用校验注解。

```kotlin
// 请求 DTO
@Schema(description = "新增{Entity}请求")
data class {Entity}AddReq(
    @field:NotBlank(message = "名称不能为空")
    @Schema(description = "名称", example = "示例")
    val name: String,

    @field:NotNull(message = "状态不能为空")
    @Schema(description = "状态")
    val status: StatusEnum
)

// 响应 DTO
@Schema(description = "{Entity}详情响应")
data class {Entity}Resp(
    @Schema(description = "ID")
    val id: String,
    @Schema(description = "名称")
    val name: String,
    @Schema(description = "状态")
    val status: StatusEnum
)

// 查询 DTO
@Schema(description = "{Entity}查询请求")
data class {Entity}Query(
    @Schema(description = "名称（模糊查询）")
    val name: String? = null,

    @Schema(description = "状态")
    val status: StatusEnum? = null,
)
```

### 5.2 Service 层规范
**建议**：根据项目需要选择接口与实现分离。

#### 5.2.1 有 SDK 层的情况
```kotlin
// SDK 层接口
interface I{Module}Service {
    fun add(req: {Entity}AddReq): String
    fun detail(id: String): {Entity}Resp
    fun query(req: PageQuery<{Entity}Query>): PageResult<{Entity}Resp>
}

// Service 层实现
@Service
class {Module}Service(
    private val {module}Dao: {Module}Dao
) : I{Module}Service {

    override fun add(req: {Entity}AddReq): String {
        // 业务逻辑实现
    }

    override fun detail(id: String): {Entity}Resp {
        // 业务逻辑实现
    }

    override fun query(req: PageQuery<{Entity}Query>): PageResult<{Entity}Resp> {
        // 查询逻辑实现
    }
}
```

#### 5.2.2 无 SDK 层的情况
```kotlin
// 直接在 Service 层实现
@Service
class {Entity}Service(
    private val {entity}Dao: {Entity}Dao
) {

    fun add(req: {Entity}AddReq): String {
        // 业务逻辑实现
    }

    fun detail(id: String): {Entity}Resp {
        // 业务逻辑实现
    }

    fun query(req: PageQuery<{Entity}Query>): PageResult<{Entity}Resp> {
        // 查询逻辑实现
    }
}
```

#### 5.2.3 异常处理规范
🔴 **必须**：优先使用工具函数抛出异常。

🔴 **必须**：所有业务异常抛出 tony.exception.BizException。
```kotlin
// 工具函数示例
value.throwIfNull("值不能为空")
condition.throwIfTrue("条件不满足")
```

**禁止**：Service 实现类继承 MyBatis-Plus 的 `ServiceImpl`。

### 5.3 Controller 规范
- 🔴 **必须**：使用 `@RestController`，路由注解只放在方法上。
- 🔴 **必须**：统一使用 `@PostMapping` + `@RequestBody`。
- 🔴 **必须**： 方法参数校验统一使用 `@Validated`。

```kotlin
@RestController
@Tag(name = "{Module}管理", description = "{Module}相关接口")
class {Module}Controller(
    private val {module}Service: {Module}Service
) {

    @PostMapping("/add")
    @Operation(summary = "新增{Entity}", description = "新增{Entity}信息")
    fun add(@Validated @RequestBody req: {Entity}AddReq): String {
        return {module}Service.add(req)
    }

    @PostMapping("/detail")
    @Operation(summary = "根据ID查询", description = "根据ID查询{Entity}详情")
    fun detail(@Validated @RequestBody req: IdReq): {Entity}Resp {
        return {module}Service.detail(req.id)
    }

    @PostMapping("/query")
    @Operation(summary = "查询{Entity}列表", description = "分页查询{Entity}列表")
    fun query(@Validated @RequestBody req: {Entity}Query): PageResult<{Entity}Resp> {
        return {module}Service.query(req)
    }
}
```

---

## 6. 配置规范

### 6.1 Web 配置
🔴 **建议**：注册上下文注入器，支持 DTO 字段自动注入。

```kotlin
@Configuration
class {ProjectName}WebConfig {

    @Bean
    fun userIdInjector(): UserIdInjector {
        return UserIdInjector()
    }
}
```

### 6.2 自定义注入注解
🔴 **建议**：封装自定义注解，避免手写字符串 key。

```kotlin
@Target(AnnotationTarget.FIELD)
@Retention(AnnotationRetention.RUNTIME)
@JacksonInject("userId")
annotation class UserIdInject

// 使用
data class DemoReq(
    val name: String,
    @get:UserIdInject
    val userId: String? = null
)
```

---

## 7. 快速参考

### 7.1 规则优先级
- 🔴 **必须**：违反将导致编译错误或运行时异常。
- **建议**：推荐遵循，提高代码质量。
- 🟢 **可选**：根据项目需要选择。

### 7.2 核心规则速查表

| 层级             | 类名格式                                            | 包路径                              | 职责与要求                       |
|----------------|-------------------------------------------------|----------------------------------|-----------------------------|
| Controller     | `{Module}Controller`                            | `controller`                     | 接收请求、参数校验、调用Service、返回结果    |
| Service        | `{Module}Service`                               | `service.impl`                   | 业务逻辑实现、构造器注入、不继承ServiceImpl |
| Service接口(SDK) | `I{Module}Service`                              | `service`                        | 业务接口定义、无注解                  |
| DAO            | `{Module}Dao`                                   | `dao`                            | 数据访问、继承BaseDao、使用XML映射      |
| PO             | `{Entity}`                                      | `po`                             | 实体映射、MyBatis-Plus注解、审计字段    |
| DTO            | `{Entity}AddReq`/`{Entity}Resp`/`{Entity}Query` | `dto.req`/`dto.resp`/`dto.query` | 数据传输、校验注解、Swagger文档         |

### 7.3 常见错误模式
- ❌ 在 DAO 接口使用 `@Select` 注解。
- ❌ Controller 类上使用路由注解。
- ❌ 使用通配符导入。
- ❌ 实体类字段使用原始类型而非枚举。
- ❌ 缺少必要的注释。
- ❌ 违反命名规范。

### 7.4 最佳实践清单
- ✅ 使用构造器注入依赖。
- ✅ 完整的参数校验。
- ✅ 规范的 Swagger 注解。
- ✅ 类型安全的 DTO 设计。
- ✅ 清晰的业务逻辑分层。
- ✅ 完整的项目骨架文件。
