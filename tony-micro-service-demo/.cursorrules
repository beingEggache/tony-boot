# Tony Micro Service Demo - 微服务项目开发规则

## 项目概述
Tony Micro Service Demo 是一个基于 Spring Cloud 的微服务架构示例项目，展示微服务开发的最佳实践，包括服务注册发现、配置管理、服务间通信、负载均衡、熔断降级等功能。

## 技术栈
- **编程语言**: Kotlin 2.1.21+
- **构建工具**: Gradle (Kotlin DSL)
- **核心框架**: Spring Boot 3.5.0+, Spring Cloud 2025.0.0
- **微服务组件**: Spring Cloud Alibaba 2023.0.3.3
- **服务注册**: Nacos Discovery
- **配置中心**: Nacos Config
- **服务调用**: OpenFeign 13.6
- **负载均衡**: Spring Cloud LoadBalancer
- **熔断降级**: Sentinel
- **API网关**: Spring Cloud Gateway
- **数据库**: MySQL, Redis
- **ORM**: MyBatis Plus 3.5.12

## 项目结构

### 模块划分
- **tony-api**: API接口定义和DTO
- **tony-service**: 业务服务实现
- **tony-gateway**: API网关服务 (可选)
- **tony-common**: 公共组件和工具

### 服务架构
```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   API Gateway   │    │   User Service  │    │  Order Service  │
│   (Gateway)     │    │   (Service)     │    │   (Service)     │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │   Nacos Server  │
                    │ (Registry/Config)│
                    └─────────────────┘
```

## 开发规范

### 服务设计原则
- **单一职责**: 每个服务只负责一个业务领域
- **松耦合**: 服务间通过接口通信，避免直接依赖
- **高内聚**: 服务内部功能紧密相关
- **可独立部署**: 每个服务可以独立构建和部署

### 包结构规范
```
tony-{service}/
├── src/main/kotlin/tony/
│   ├── config/          # 配置类
│   ├── controller/      # 控制器层
│   ├── service/         # 业务逻辑层
│   ├── repository/      # 数据访问层
│   ├── entity/          # 实体类
│   ├── dto/            # 数据传输对象
│   ├── exception/       # 异常处理
│   └── utils/          # 工具类
├── src/main/resources/
│   ├── application.yml # 应用配置
│   ├── bootstrap.yml   # 启动配置
│   └── logback-spring.xml # 日志配置
└── src/test/           # 测试代码
```

### 服务命名规范
- **服务名**: 使用业务领域命名 (如: `user-service`, `order-service`)
- **包名**: 使用服务名作为包前缀 (如: `tony.user`, `tony.order`)
- **配置前缀**: 使用服务名作为配置前缀 (如: `tony.user`, `tony.order`)

## 微服务组件

### 服务注册与发现
- 使用 Nacos 作为服务注册中心
- 服务启动时自动注册到 Nacos
- 服务关闭时自动注销
- 支持服务健康检查

### 配置管理
- 使用 Nacos 作为配置中心
- 支持配置的动态更新
- 按环境分离配置 (dev, qa, prod)
- 敏感配置使用加密存储

### 服务间通信
- 使用 OpenFeign 进行服务调用
- 定义服务接口和客户端
- 支持负载均衡和熔断降级
- 使用 DTO 进行数据传输

### 负载均衡
- 使用 Spring Cloud LoadBalancer
- 支持多种负载均衡策略
- 自动故障转移
- 支持权重路由

### 熔断降级
- 使用 Sentinel 进行熔断降级
- 定义熔断规则和降级策略
- 支持实时监控和动态配置
- 提供友好的降级响应

## 代码规范

### 接口设计规范
- 使用 RESTful API 设计原则
- 统一的响应格式和错误码
- 版本化的API接口
- 详细的API文档

### 数据传输规范
- 使用 DTO 进行服务间数据传输
- 避免直接传递实体对象
- 定义清晰的数据契约
- 支持数据验证和转换

### 异常处理规范
- 定义统一的异常类型
- 使用全局异常处理器
- 提供友好的错误信息
- 记录详细的错误日志

### 日志规范
- 使用结构化日志格式
- 记录请求链路信息
- 敏感信息脱敏处理
- 支持日志聚合和分析

## 配置管理

### 应用配置
```yaml
spring:
  application:
    name: tony-user-service
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        namespace: ${spring.profiles.active}
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        namespace: ${spring.cloud.nacos.discovery.namespace}
        file-extension: yml
```

### 服务配置
- 数据库连接配置
- Redis 缓存配置
- 线程池配置
- 超时和重试配置

### 环境配置
- 开发环境: 本地开发配置
- 测试环境: 集成测试配置
- 生产环境: 生产部署配置

## 测试规范

### 单元测试
- 每个业务方法都要有单元测试
- 使用 Mock 隔离外部依赖
- 测试覆盖率 > 80%
- 测试用例命名清晰

### 集成测试
- 测试服务间调用
- 测试数据库操作
- 测试缓存功能
- 使用测试容器

### 端到端测试
- 测试完整的业务流程
- 测试服务间协作
- 测试异常场景处理
- 性能压力测试

## 部署规范

### 容器化部署
- 使用 Docker 容器化
- 提供 Dockerfile
- 支持多阶段构建
- 优化镜像大小

### 服务编排
- 使用 Docker Compose 本地开发
- 使用 Kubernetes 生产部署
- 配置服务发现和负载均衡
- 支持滚动更新

### 监控告警
- 集成 Spring Boot Actuator
- 配置健康检查端点
- 设置性能监控指标
- 配置告警规则

## 性能优化

### 服务性能
- 使用连接池管理资源
- 合理配置线程池
- 优化数据库查询
- 使用缓存减少计算

### 网络性能
- 使用 HTTP/2 协议
- 启用响应压缩
- 配置连接复用
- 优化序列化性能

### 资源优化
- 合理设置JVM参数
- 监控内存使用情况
- 优化GC性能
- 避免内存泄漏

## 安全规范

### 服务安全
- 使用HTTPS传输
- 实现服务间认证
- 配置访问控制
- 记录安全审计日志

### 数据安全
- 敏感数据加密存储
- 传输数据加密
- 输入数据验证
- 防止注入攻击

### 配置安全
- 敏感配置加密
- 使用环境变量
- 限制配置访问权限
- 定期安全审计

## 运维规范

### 日志管理
- 统一日志格式
- 配置日志轮转
- 支持日志聚合
- 提供日志查询接口

### 监控管理
- 服务健康监控
- 性能指标监控
- 业务指标监控
- 异常告警通知

### 备份恢复
- 数据库定期备份
- 配置文件备份
- 制定恢复策略
- 定期恢复演练

## 开发流程

### 服务开发流程
1. 定义服务接口和DTO
2. 实现业务逻辑
3. 编写单元测试
4. 集成测试验证
5. 性能测试优化
6. 部署和监控

### 版本管理
- 使用语义化版本号
- 保持向后兼容性
- 提供升级指南
- 支持灰度发布

### 持续集成
- 自动化构建
- 自动化测试
- 自动化部署
- 质量门禁检查
