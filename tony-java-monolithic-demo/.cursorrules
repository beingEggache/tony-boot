# Web 项目开发规范

---
## 规则等级说明
- 🔴 **必须**：项目强制要求。
- 🟡 **建议**：推荐遵循，提高代码质量。
- 🟢 **可选**：根据项目需要选择。
---
## 1. 项目概述

---
###  核心特点
- **统一规范**：严格遵循本文档定义的开发规约。
- **模块化架构**：API、Service、DTO、DAO、PO 等分层设计。
---
###  占位符规范

| 占位符             | 说明                             | 示例                                      |
|-----------------|--------------------------------|-----------------------------------------|
| `{company}`     | 公司/组织名（全小写）                    | `tony`                                  |
| `{projectName}` | 项目名（小写驼峰）                      | `demo`                                  |
| `{ProjectName}` | 项目名（大写驼峰）                      | `Demo`、`byteDance`                      |
| `{module}`      | 模块名（全小写）                       | `sys`、`housemanage`                     |
| `{Module}`      | 模块名（首大写）                       | `Sys`、`houseManage`                     |
| `{entity}`      | 实体类名（小写驼峰）                     | `employee`、`saleOrder`                  |
| `{Entity}`      | 实体类名（大写驼峰）                     | `Employee`、`SaleOrder`                  |
| `{table}`       | 数据库表名（全小写模块名+小写snake_case实体类名） | `sys_employee`、`housemanage_sale_order` |
---

## 2. 项目结构规范

---
###  标准模块结构
```
{project-name}/
├── {company}-api/              # Web 层：控制器、配置、启动类、Docker 文件
├── {company}-service/          # 业务层：服务实现、DAO、PO
├── {company}-dto/              # 数据传输：请求/响应/查询 DTO、枚举
├── {company}-sdk/              # 接口层：服务接口（🟡 当使用微服务架构需要对外提供接口jar包时, 请选择接口与实现分离。）
├── db/                         # 数据库脚本
├── build.gradle.kts            # 根项目构建配置
├── settings.gradle.kts         # 项目设置文件
├── gradle.properties           # Gradle 属性配置
├── gradlew                     # Gradle Wrapper (Unix)
├── gradlew.bat                 # Gradle Wrapper (Windows)
├── gradle/                     # Gradle Wrapper 目录
├── README.md                   # 项目说明文档
├── .editorconfig               # 编辑器配置
├── .gitignore                  # Git 忽略文件
├── .gitattributes              # Git 属性配置
└── dockerBuild.sh              # Docker 构建脚本
```
---
###  核心文件结构

####  API 模块文件
```
{company}-api/
├── src/main/
│   ├── java/{company}/{projectName}/
│   │   ├── {ProjectName}WebApp.java           # 主应用启动类
│   │   ├── config/                          # 配置类包
│   │   │   ├── {ProjectName}WebConfig.java    # Web 配置类
│   │   │   └── {ProjectName}WebContext.java   # Web 上下文常量（可选）
│   │   └── {module}/                        # 业务模块包
│   │       └── controller/                  # 控制器包
│   │           └── {Module}Controller.java    # 控制器类
│   └── resources/
│       ├── application.yml                  # 主配置文件
│       └── logback-spring.xml               # 日志配置
├── Dockerfile                               # Docker 镜像构建文件
├── docker-compose.yml                       # Docker 编排文件
├── docker-entrypoint.sh                     # Docker 启动脚本
└── build.gradle.kts                         # 模块构建配置
```
---
####  Service 模块文件
```
{company}-service/
├── src/main/
│   ├── java/{company}/{projectName}/
│   │   └── {module}/                        # 业务模块包
│   │       ├── service/                     # 服务包
│   │       │   └── impl/                    # 服务实现包
│   │       │       └── {Module}Service.java   # 服务实现类
│   │       ├── dao/                         # 数据访问包
│   │       │   └── {Module}Dao.java           # 数据访问接口
│   │       └── po/                          # 持久化对象包
│   │           └── {Entity}.java              # 持久化对象类
│   └── resources/
│       └── mappers/                         # MyBatis 映射文件目录
│           └── {Module}Dao.xml              # SQL 映射文件
└── build.gradle.kts                         # 模块构建配置
```
---
####  DTO 模块文件
```
{company}-dto/
├── src/main/
│   └── java/{company}/{projectName}/
│       └── {module}/                        # 业务模块包
│           └── dto/                         # DTO 包
│               ├── req/                     # 请求 DTO 包
│               │   └── {Entity}AddReq.java    # 请求 DTO 类
│               ├── resp/                    # 响应 DTO 包
│               │   └── {Entity}Resp.java      # 响应 DTO 类
│               ├── query/                   # 查询 DTO 包
│               │   └── {Entity}Query.java     # 查询 DTO 类
│               └── enums/                   # 枚举包
│                   └── {BusinessConcept}Enum.java # 枚举类
└── build.gradle.kts                         # 模块构建配置
```
---
####  SDK 模块文件（🟡 当使用微服务架构需要对外提供接口jar包时, 请选择接口与实现分离。）
```
{company}-sdk/
├── src/main/
│   └── java/{company}/{projectName}/
│       └── {module}/                        # 业务模块包
│           └── service/                     # 服务接口包
│               └── I{Module}Service.java      # 服务接口类
└── build.gradle.kts                         # 模块构建配置
```
---
####  数据库脚本文件
```
db/
├── db.init.mysql.sql                        # 初始化用户、数据库（MySQL）
├── db.init.table.mysql.sql                  # 初始化表结构（MySQL）
└── db.init.data.mysql.sql                   # 初始化数据（MySQL）
```
---

## 3. 核心开发规范

---
###  注释规范
🔴 所有公共类、接口、方法、属性、变量必须有注释。

```java
/**
 * 功能描述
 * 详细说明/使用场景
 *
 * @param paramName 参数说明
 * @return 返回值说明
 * @throws ExceptionType 异常说明
 * @author 作者
 * @date 2025/07/04 14:00 （此处为生成时系统时间）
 */
```
---
###  导入规范
🔴 禁止通配符导入，所有导入必须为显式导入。

```java
import java.util.UUID;
import org.springframework.util.AntPathMatcher;
// ❌ import java.util.*;  // 禁止
```
---

###  枚举规范
🔴 枚举值命名全大写, 所有枚举实现统一接口，支持默认值。

```java
@Schema(description = "状态枚举")
public enum StatusEnum implements IntEnumValue {
    ENABLED(1),
    DISABLED(0),
    @JsonEnumDefaultValue
    UNUSED(DEFAULT_INT_VALUE);

    private final int value;
    StatusEnum(int value) { this.value = value; }
    @Override public int getValue() { return value; }

    @JsonCreator
    public static StatusEnum create(int value) { /* ... */ }
}
```
```java
@Schema(description = "性别枚举")
public enum GenderEnum implements StringEnumValue {
    MALE("MALE"),
    FEMALE("FEMALE"),
    @JsonEnumDefaultValue
    UNUSED(DEFAULT_STRING_VALUE);

    private final String value;
    GenderEnum(String value) { this.value = value; }
    @Override public String getValue() { return value; }

    @JsonCreator
    public static GenderEnum create(String value) { /* ... */ }
}
```

🔴 业务字段使用枚举类型，禁止使用原始类型。

```java
// ✅ 正确
public StatusEnum status = StatusEnum.ENABLED;
public GenderEnum gender = GenderEnum.MALE;

// ❌ 错误
public int status = 1;
public String status = "MALE";
```
---

## 4. 数据层规范

---
###  实体类规范
- 🔴 使用 MyBatis-Plus 注解，包含审计字段。
- 🔴 字段顺序（主键、外键(其他表主键id)、业务字段、审计字段）。
- 🔴 PO 类推荐使用 Lombok `@Getter @Setter`。

```java
@Getter
@Setter
@TableName("{table}")
public class {Entity} {
    @TableId
    private String {entity}Id;

    // 业务字段...

    @OrderBy
    @TableField(insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER)
    private LocalDateTime createTime = LocalDateTime.now();

    @MybatisPlusMetaProperty(MetaColumn.USER_ID)
    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.NEVER)
    private String creatorId = "";

    @MybatisPlusMetaProperty(MetaColumn.USER_NAME, relativeProp = "creatorId")
    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.NEVER)
    private String creatorName = "";

    @TableField(insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER, update = "CURRENT_TIMESTAMP")
    private LocalDateTime updateTime = LocalDateTime.now();

    @TableField(fill = FieldFill.UPDATE, insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER)
    private String updatorId = "";

    @TableField(fill = FieldFill.UPDATE, insertStrategy = FieldStrategy.NEVER, updateStrategy = FieldStrategy.NEVER)
    private String updatorName = "";

    @TableLogic
    private LocalDateTime deleteTime;

    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.NEVER)
    private String tenantId = "";
}
```
---
###  数据库表规范
- 🔴 表字段顺序（主键、外键(其他表主键id)、业务字段、审计字段）。
- 🔴 字段命名统一为小写+下划线, 表注释、字段注释必填。
```sql
CREATE TABLE `{table}` (
    `{table}_id` varchar(50) NOT NULL COMMENT '主键',
    -- 业务字段...
    `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `creator_id` varchar(32) NOT NULL DEFAULT '' COMMENT '创建人',
    `creator_name` varchar(30) NOT NULL DEFAULT '' COMMENT '创建人名称',
    `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    `updator_id` varchar(32) NOT NULL DEFAULT '' COMMENT '更新人',
    `updator_name` varchar(30) NOT NULL DEFAULT '' COMMENT '更新人名称',
    `delete_time` timestamp NULL DEFAULT NULL COMMENT '删除标记',
    `tenant_id` varchar(32) NOT NULL DEFAULT '' COMMENT '租户id',
    PRIMARY KEY (`{table}_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='{表说明}';
```
- 🔴 主键索引：`PRIMARY KEY ({field})`。
- 🔴 唯一索引：`UNIQUE KEY uk_{table}_{field}(field)`。
- 🔴 普通索引：`KEY idx_{table}_{field}(field)`。
- 🔴 复合索引：`KEY idx_{table}_{field1}_{field2}(field1, field2)`。
---

###  DAO 层规范
- 🔴 继承 `tony.mybatis.dao.BaseDao`，使用 XML 映射文件。
- 🔴 在接口上使用 `@Select`、`@Update` 等注解。

```java
import tony.mybatis.dao.BaseDao;
public interface {Entity}Dao extends BaseDao<{Entity}> {
}
```
---

## 5. 业务层规范

---
###  DTO 规范
- 🔴 请求({Entity}{Action}Req)/响应({Entity}{Action}Resp)/查询({Entity}{Action}Query) DTO 分离，使用校验注解。
- 🔴 字段全部加上 `@Schema` 注解，便于自动生成文档。
- 🔴 字段顺序（主键、外键(其他表主键id)、业务字段、审计字段）。
- 🔴 dto-po, po-dto 互转建议使用`tony.utils.Objs.copyTo(targetType: Class<T>)` 方法。
- 🟡 DTO 类推荐使用 Lombok `@Getter @Setter`。

```java
@Getter
@Setter
@Schema(description = "新增{Entity}请求")
public class {Entity}AddReq {
    @NotBlank(message = "姓名不能为空")
    @Schema(description = "姓名", example = "张三")
    private String {entity}Name;

    @NotNull(message = "状态不能为空")
    @Schema(description = "状态")
    private StatusEnum status;
}
```
```java
@Getter
@Setter
@Schema(description = "员工{Entity}响应")
public class {Entity}Resp {
    @Schema(description = "ID")
    private String {entity}Id;
    @Schema(description = "姓名")
    private String {entity}Name;
    @Schema(description = "状态")
    private StatusEnum status;
}
```
```java
@Getter
@Setter
@Schema(description = "员工查询请求")
public class {Entity}Query {
    @Schema(description = "姓名（模糊查询）")
    private String {entity}Name;
    @Schema(description = "状态")
    private StatusEnum status;
}
```
---
###  Service 层规范
- 🟡 当微服务架构需要对外提供接口jar包时, 请选择接口与实现分离。
- 🔴 当接口逻辑里包含多行 增/删/改逻辑时请使用事务。
- 🔴 Bean 注入用 `@RequiredArgsConstructor` + `private final` 字段。

####  有 SDK 层的情况

```java
// SDK 层接口
public interface I{Entity}Service {
    String add({Entity}AddReq req);
    {Entity}Resp detail(String {entity}Id);
    PageResult<{Entity}Resp> query(PageQuery<{Entity}Query> req);
}
```
```java
// Service 层实现
@Service
@RequiredArgsConstructor
public class {Entity}Service implements I{Entity}Service {
    private final {Entity}Dao {entity}Dao;

    @Override
    public String add({Entity}AddReq req) { /* ... */ }

    @Override
    public EmployeeResp detail(String {entity}Id) { /* ... */ }

    @Override
    public PageResult<{Entity}Resp> query(PageQuery<{Entity}Query> req) { /* ... */ }
}
```
---
####  无 SDK 层的情况
```java
// 直接在 Service 层实现
@Service
@RequiredArgsConstructor
public class {Entity}Service {
    private final {Entity}Dao {entity}Dao;

    public String add({Entity}AddReq req) { /* ... */ }

    public EmployeeResp detail(String {entity}Id) { /* ... */ }

    public PageResult<{Entity}Resp> query(PageQuery<{Entity}Query> req) { /* ... */ }
}
```
---
####  异常处理规范
- 🔴 优先使用`tony.utils.Funcs`下的工具函数抛出异常。
- 🔴 所有业务异常抛出 `tony.exception.BizException`。
- 🔴 **禁止**：直接抛出 `RuntimeException`或其他`Exception`的子类。
```java
// ✅ 正确
// 工具函数示例
Funcs.throwIfNull(value, "值不能为空");
Funcs.throwIfTrue(condition, "条件不满足");
throw new BizException("业务异常");

// ❌ 错误
throw new RuntimeException("业务异常");
```

**禁止**：Service 实现类继承 MyBatis-Plus 的 `ServiceImpl`。

---
###  Controller 规范
- 🔴 使用 `@RestController`，路由注解只放在方法上。
- 🔴 统一使用 `@PostMapping` + `@RequestBody`。
- 🔴 方法参数校验统一使用 `@Validated`。
- 🔴 当引入`tony-web`依赖, 而且`web.wrap-response-body-enabled`配置值为`true`时,正常情况下会包装成`ApiResult<T>`。
- 🔴 只做参数校验和调用 Service，禁止写业务逻辑。
- 🔴 Bean 注入用 `@RequiredArgsConstructor` + `private final` 字段。

```java
@RestController
@Tag(name = "{Entity}管理", description = "{Entity}相关接口")
@RequiredArgsConstructor
public class {Entity}Controller {
    private final {Entity}Service {entity}Service;

    @PostMapping("/add")
    @Operation(summary = "新增{entity}", description = "新增{entity}信息")
    public String add(@Validated @RequestBody {Entity}AddReq req) {
        return employeeService.add(req);
    }

    @PostMapping("/detail")
    @Operation(summary = "根据ID查询", description = "根据ID查询{entity}详情")
    public {Entity}Resp detail(@Validated @RequestBody WrappedReq<String> req) {
        return {entity}Service.detail(req.getValue());
    }

    @PostMapping("/query")
    @Operation(summary = "查询{entity}列表", description = "分页查询{etity}列表")
    public PageResult<{Entity}Resp> query(@Validated @RequestBody PageQuery<{Entity}Query> req) {
        return {entity}Service.query(req);
    }
}
```
---

## 6. 配置规范

---
###  Web 配置
🔴 注册上下文注入器，支持 DTO 字段自动注入。

```java
@Configuration
public class {ProjectName}WebConfig {
    @Bean
    public UserIdInjector userIdInjector() {
        return new UserIdInjector();
    }
}
```
---
###  自定义注入注解
🟡 封装自定义注解，避免手写字符串 key。

```java
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@JacksonInject("userId")
public @interface UserIdInject { }
```
---

## 7. 快速参考
- ❌ 在 DAO 接口使用 `@Select` 注解。
- ❌ Controller 类上使用路由注解。
- ❌ 使用通配符导入。
- ❌ 实体类字段使用原始类型而非枚举。
- ❌ 违反命名规范。
- ✅ 使用 Lombok。
- ✅ Bean 注入用 `@RequiredArgsConstructor` + `private final`。
- ✅ 完整的参数校验。
- ✅ 规范的 Swagger 注解。
- ✅ 类型安全的 DTO 设计。
- ✅ 清晰的业务逻辑分层。
- ✅ 完整的项目骨架文件。

