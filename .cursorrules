# Tony Projects - 全局开发规则

## 项目概述
这是一个基于 Kotlin/Java + Spring Boot 的企业级开发脚手架集合，包含多个子项目，涵盖单体应用、微服务、API网关等多种架构模式。

## 技术栈
- **编程语言**: Kotlin 2.1.21, Java 21
- **构建工具**: Gradle (Kotlin DSL)
- **核心框架**: Spring Boot 3.5.0, Spring Framework 6.2.8
- **微服务**: Spring Cloud 2025.0.0, Spring Cloud Alibaba 2023.0.3.3
- **数据库**: MySQL 9.3.0, PostgreSQL 42.7.7, Redis
- **ORM**: MyBatis Plus 3.5.12
- **API文档**: Knife4j 4.6.0, Swagger 2.2.33
- **序列化**: Jackson 2.19.1, Gson 2.13.1
- **安全**: JWT, BouncyCastle 1.81
- **网络**: Netty 4.2.2.Final, gRPC 1.73.0
- **任务调度**: PowerJob 5.1.1

## 代码规范

### 命名规范
- **包名**: 使用小写字母，点分隔 (如: `tony.core.utils`)
- **类名**: 使用 PascalCase (如: `ApiResult`, `SpringContexts`)
- **方法名**: 使用 camelCase (如: `getLogger`, `addInterceptors`)
- **常量**: 使用 UPPER_SNAKE_CASE (如: `PROJECT_GROUP`)
- **变量**: 使用 camelCase (如: `apiResult`, `springContext`)

### 文件组织
- **Kotlin文件**: 使用 `.kt` 扩展名
- **Java文件**: 使用 `.java` 扩展名
- **配置文件**: 使用 `.yml` 或 `.properties`
- **构建文件**: 使用 `build.gradle.kts`

### 注释规范
- 使用中文注释，保持简洁明了
- 类和方法必须有文档注释
- 复杂逻辑需要行内注释说明

### 依赖管理
- 使用 Gradle Version Catalog 管理依赖版本
- 版本定义在 `gradle/libs.versions.toml` 文件中
- 避免硬编码版本号

### 禁止使用 * 号的 import，所有 import 必须显式指定类或函数名。

### 注解使用规范
- @RequestMapping 不要加在类上，请直接加在方法上
- 使用具体的HTTP方法注解如 @GetMapping, @PostMapping 等

## 架构原则

### 分层架构
- **API层**: 控制器和接口定义
- **Service层**: 业务逻辑处理
- **DAO层**: 数据访问对象
- **DTO层**: 数据传输对象
- **Config层**: 配置类

### 模块化设计
- 每个功能模块独立
- 模块间通过接口通信
- 避免循环依赖

### 配置管理
- 使用 Spring Boot 配置属性
- 环境配置分离 (dev, qa, prod)
- 敏感信息使用环境变量

## 开发实践

### 异常处理
- 使用统一的异常处理机制
- 定义业务异常类型
- 提供友好的错误信息

### 日志记录
- 使用 SLF4J + Logback
- 不同级别日志合理使用
- 敏感信息不记录日志

### 测试规范
- 单元测试覆盖率 > 80%
- 集成测试覆盖关键流程
- 使用 JUnit 5 + Mockito

### 安全规范
- 输入参数验证
- SQL注入防护
- XSS攻击防护
- 敏感数据加密

## 部署规范

### 容器化
- 使用 Docker 容器化部署
- 提供 Dockerfile 和 docker-compose.yml
- 多阶段构建优化镜像大小

### 环境配置
- 开发环境: dev
- 测试环境: qa  
- 生产环境: prod

### 监控告警
- 集成 Spring Boot Actuator
- 健康检查端点
- 性能监控指标

## 代码质量

### 静态分析
- 使用 Ktlint 进行代码格式化
- 集成 SonarQube 代码质量检查
- 遵循 Kotlin 和 Java 编码规范

### 版本控制
- 使用 Git 进行版本控制
- 提交信息使用中文描述
- 分支管理遵循 Git Flow

### 持续集成
- 自动化构建和测试
- 代码质量门禁
- 自动化部署流水线

## 性能优化

### 数据库优化
- 合理使用索引
- 避免 N+1 查询问题
- 使用连接池管理连接

### 缓存策略
- Redis 缓存热点数据
- 本地缓存减少网络开销
- 缓存更新策略

### 异步处理
- 使用异步方法处理耗时操作
- 消息队列解耦系统
- 响应式编程提升性能

## 文档规范

### API文档
- 使用 Swagger/OpenAPI 规范
- 详细的接口说明和示例
- 错误码和响应格式说明

### 技术文档
- README.md 项目说明
- 架构设计文档
- 部署运维文档

### 代码文档
- 类和方法的文档注释
- 复杂算法的实现说明
- 配置项的说明文档 