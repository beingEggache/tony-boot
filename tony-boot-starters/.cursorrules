# tony-boot-starters 项目 CursorRules

## 核心原则

- **模块化设计**: 各模块可独立引入，按需集成，互不强依赖
- **Kotlin 优先**: 主要使用 Kotlin 开发，保持 Java 互操作性
- **自动化构建**: 内置 Gradle 插件，支持一键构建、发布、代码规范
- **统一规范**: 【必须】遵从统一的目录结构、命名规范、注释风格

---

## 目录结构规范

### Starter 模块标准结构

每个 starter 模块【必须】采用如下标准结构：
```
tony-[module-name]/
├── build.gradle.kts                   # 模块独立构建脚本
├── README.md                          # 模块详细说明文档
├── src/
│   ├── main/
│   │   ├── kotlin/                    # Kotlin 源码（主要）
│   │   │   └── tony/
│   │   │       └── [module-name]/     # 模块包名
│   │   ├── java/                      # Java 源码（可选，用于互操作）
│   │   └── resources/                 # 资源文件
│   │       ├── META-INF/
│   │       │   └── spring/
│   │       │       └── org.springframework.boot.autoconfigure.AutoConfiguration.imports
│   │       └── [module-name].config.yml # 配置示例（可选）
│   └── test/
│       ├── kotlin/                    # Kotlin 测试源码（主要）
│       │   └── tony/
│       │       └── test/              # 测试包名
│       │           └── [module-name]/ # 对应模块测试
│       ├── java/                      # Java 测试源码（可选）
│       └── resources/                 # 测试资源
```

### 源码包结构规范

```
src/main/kotlin/tony/[module-name]/
├── config/                           # 配置类（包含自动装配）
│   ├── [Module]AutoConfiguration.kt
│   └── [Module]Properties.kt
├── service/                          # 服务类
├── utils/                            # 工具类
├── exception/                        # 异常类
└── [其他业务包]/
```

**测试包结构：**
```
src/test/kotlin/tony/test/
├── [module-name]/                    # 模块测试包
│   ├── config/                       # 测试配置
│   ├── util/                         # 测试工具
│   └── [ClassName]Test.kt            # 具体测试类
└── utils/                            # 通用工具测试
    └── [UtilsClass]Test.kt
```

### 关键特点

**Kotlin 为主，Java 互操作：**
- 主要源码使用 Kotlin 编写
- 保留 `src/main/java` 目录用于 Java 互操作场景
- 测试代码也以 Kotlin 为主，保留 Java 测试选项

**配置文件（可选）：**
- 配置文件不是必须的，主要用于常用配置的默认值处理
- 配置文件命名：`[module-name].config.yml`

### 命名规范

**文件命名：**
- Kotlin 文件：PascalCase，如 `ApiResult.kt`、`Strs.kt`
- 配置文件：`[module-name].config.yml`
- 单元测试：`[ClassName]Test.kt`
- 集成测试：`[Module]IntegrationTest.kt`
- 测试应用：`Test[Module]Application.kt`
- 测试配置：`[Module]TestConfig.kt`

### 模块化原则

- **独立性**: 每个 starter 模块可独立引入
- **标准化**: 【必须】统一目录结构，便于维护
- **可测试性**: 完整的测试目录结构，支持单元测试和集成测试
- **文档化**: 每个模块【必须】有完整的 README.md

AI生成代码时需遵循本节所有约定

---

## 自动装配规范

- 每个功能模块单独配置类，【必须】命名为 `[Module]Config`，包路径【必须】为 `tony.[module].config`
- 推荐注解组合：`@Configuration` + `@EnableConfigurationProperties([Module]Properties::class)` + `@ConditionalOnProperty` + `@ConditionalOnMissingBean`
- 属性类用 `@ConfigurationProperties` + `data class`，字段建议有Kotlin默认值
- 每个自动装配类【必须】注册到 `META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports`，每行一个全限定类名
- 支持条件装配，允许用户自定义Bean覆盖
- 如有特殊场景，可选用 `@ConditionalOnClass`、`@ConditionalOnBean`、`@AutoConfigureBefore/After` 等注解

**标准模板：**
```kotlin
@Configuration
@EnableConfigurationProperties(DemoProperties::class)
@ConditionalOnProperty(prefix = "tony.[module]", name = ["enabled"], havingValue = "true", matchIfMissing = true) // 可选,并不一定每个都需要
class [Module]Config(val properties: [Module]Properties) {

    @ConditionalOnMissingBean([Module]Service::class)
    @Bean
    fun [module]Service() = [Module]Service(properties)
}

@ConfigurationProperties(prefix = "tony.[module]")
data class [Module]Properties(
    val enabled: Boolean = true,
    val name: String = "default"
)
```

### 资源文件规范

```
src/main/resources/
├── META-INF/
│   └── spring/
│       └── org.springframework.boot.autoconfigure.AutoConfiguration.imports
└── [module-name].config.yml          # 配置示例（可选）
```

**注册示例：**
```
tony.[module].config.[Module]Config
```

### 统一入口注解

**启用注解：**
- 使用 `@EnableTonyBoot` 作为统一入口
- 支持一键启用所有 tony-boot-starters 功能

AI生成代码时需遵循本节所有约定

---

## 注释规范
- 所有公共类、方法、属性、异常等【必须】有注释，描述功能、参数、返回值、异常等关键信息。
- 推荐统一使用标准注释模板，简洁明了。
```kotlin
/**
 * 类/方法/属性功能描述
 *
 * 详细说明/代码示例/场景说明
 *
 * @param [paramName] 参数说明
 * @return [ReturnType] 返回值说明
 * @throws [ExceptionType] 异常说明
 * @author 作者
 * @date 创建日期 yyyy/MM/dd HH:mm
 */
```

AI生成代码时需遵循本节所有约定

---

## Java 互操作注意事项
- 工具类文件可用 `@file:JvmName` 提供Java友好类名。
- 关键API可用 `@JvmStatic`、`@JvmOverloads` 提供静态方法和重载。
- Kotlin扩展/内部API可用 `@JvmSynthetic` 隐藏，避免Java调用。
- 类型别名可用于简化复杂泛型。
```kotlin
@file:JvmName("Strs")
object Strs {
    @JvmStatic fun isBlank(str: String?): Boolean = str == null || str.isBlank()
}
```
---


## 枚举使用规范

- 所有枚举实现统一接口（如EnumValue<T>），value字段唯一，需有默认值
- 用表格区分Int/String实现差异

| 类型   | 接口              | value类型 | 默认值常量           | Creator基类         |
|--------|-------------------|-----------|---------------------|---------------------|
| Int    | IntEnumValue      | Int       | DEFAULT_INT_VALUE   | IntEnumCreator      |
| String | StringEnumValue   | String    | DEFAULT_STRING_VALUE| StringEnumCreator   |

**标准模板：**
```kotlin
enum class ExampleEnum(override val value: Int) : IntEnumValue {
    VALUE1(1),
    VALUE2(2),
    @JsonEnumDefaultValue
    UNUSED(DEFAULT_INT_VALUE),
    @JsonEnumDefaultValue UNUSED(DEFAULT_INT_VALUE);
    companion object : IntEnumCreator(ExampleEnum::class.java) {
        @JsonCreator
        @JvmStatic
        override fun create(value: Int) = super.create(value)
    }
}
```
- value字段加@JsonValue，companion object加@JsonCreator/@JvmStatic
- 禁止无value字段、无默认值、无接口实现

AI生成代码时需遵循本节所有约定

---

## 测试规范

### 1. 测试类组织规范

**测试类注解：**
```kotlin
@DisplayName("测试类名称")
class [ClassName]Test {
    // 测试方法
}
```

**嵌套测试结构：**
```kotlin
@Nested
@DisplayName("功能模块测试")
inner class [Feature]Test {
    @Test
    @DisplayName("具体测试场景")
    fun test[Scenario]() {
        // 测试逻辑
    }
}
```

### 2. 测试方法编写规范

**单元测试方法：**
```kotlin
@Test
@DisplayName("方法名():测试场景描述")
fun test[MethodName][Scenario]() {
    // Given - 准备测试数据
    val input = "test"

    // When - 执行被测试方法
    val result = input.methodName()

    // Then - 验证结果
    assertEquals(expected, result)
}
```

**参数化测试：**
```kotlin
@ParameterizedTest
@ValueSource(strings = ["value1", "value2", "value3"])
@DisplayName("方法名():参数化测试")
fun test[MethodName]With[Type](value: String) {
    val result = value.methodName()
    assertTrue(result.isValid())
}
```

**异常测试：**
```kotlin
@Test
@DisplayName("方法名():异常情况")
fun test[MethodName]WithException() {
    assertThrows<IllegalArgumentException> {
        methodName(invalidInput)
    }
}
```

### 3. 集成测试规范

**基础测试类：**
```kotlin
@SpringBootTest(
    classes = [Test[Module]Application::class],
    webEnvironment = SpringBootTest.WebEnvironment.NONE
)
@ActiveProfiles("test")
@TestPropertySource(locations = ["classpath:application.yml"])
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
abstract class Base[Module]Test {
    // 一些方便测试的基础方法.
}
```

**测试应用配置：**
```kotlin
@SpringBootApplication
@EnableTonyBoot
@Import([Module]TestConfig::class)
class Test[Module]Application
```

### 4. 断言使用规范
所有测试断言【必须】使用 org.junit.jupiter.api 包下的方法，不得使用其他断言库。

### 5. 测试覆盖范围规范

**必须测试的场景：**
- 正常流程测试
- 边界条件测试
- 异常情况测试
- 空值/空集合测试
- 参数化测试（多种输入）

**可选测试场景：**
- 性能测试（如适用）
- 并发安全测试（如适用）
- 集成测试（复杂模块）

---


## 导入规范

- 导入顺序：标准库 → 第三方库 → 项目内部。
- 【禁止】通配符导入，所有导入必须为显式导入。
```kotlin
import java.util.UUID
import org.springframework.util.AntPathMatcher
import {company}.{projectName}.core.ApiResult
// ❌ import java.util.*  // 禁止
```
AI生成代码时需遵循本节所有约定

---

## 异常抛出规范

- 优先用工具函数抛出异常，如throwIfNull、throwIfTrue等
- 所有自定义异常继承BaseException，分ApiException/BizException

**标准结构：**
```kotlin
open class BaseException(message: String?, val code: Int, cause: Throwable? = null) : RuntimeException(message, cause)
open class ApiException(message: String?, code: Int = ApiProperty.errorCode, cause: Throwable? = null) : BaseException(message, code, cause)
open class BizException(message: String, code: Int = ApiProperty.preconditionFailedCode) : BaseException(message, code)
```
**工具函数示例：**
```kotlin
value.throwIfNull("不能为空")
condition.throwIfTrue("条件不满足")
```

AI生成代码时需遵循本节所有约定

---


## 文档规范

### README.md 结构模板

每个模块的 README.md 必须遵循以下统一结构：

````markdown
## 概述

`tony-{module}` 是 `tony-boot-starters` 体系下的 {功能描述} 模块，{核心价值描述}。{主要解决的问题和适用场景}。

## 目录

- [如何使用](#如何使用)
- [主要功能](#主要功能)
  - [功能点1](#1-功能点1)
  - [功能点2](#2-功能点2)
  - [功能点3](#3-功能点3)
- [配置说明](#配置说明)
- [使用示例](#使用示例)
- [进阶用法](#进阶用法)
- [适用场景](#适用场景)
- [注意事项](#注意事项)

## 如何使用

### 环境要求
- **Java 21** 或更高版本
- **Spring Boot 3.x**
- **其他依赖**: {具体版本要求}

### 添加依赖

在 `build.gradle.kts` 中添加依赖：

```kotlin
dependencies {
    implementation("tony:tony-{module}:0.1-SNAPSHOT")
}
```

### 启用模块
在 Spring Boot 应用主类上添加 `@EnableTonyBoot` 注解：

```kotlin
@EnableTonyBoot
@SpringBootApplication
class YourApplication
```

## 主要功能

### 1. 功能点1

### 2. 功能点2

### 3. 功能点3

## 配置说明

### 基础配置

## 使用示例

### 基础用法

## 进阶用法

````
AI生成代码时需遵循本节所有约定

---
### 模块文档
- 每个模块都要有 README.md
- 说明模块的功能和使用方法
- 提供配置示例和代码示例
- 说明依赖关系和版本要求

### 配置文档
- 列出所有配置属性
- 说明每个属性的作用
- 提供默认值和取值范围
- 包含配置示例
