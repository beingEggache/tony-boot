# Tony Boot Starters - 通用能力库开发规则

## 项目概述
Tony Boot Starters 是一个基于 Spring Boot 的通用能力库集合，提供企业级应用开发所需的各种功能模块，包括核心工具、Web框架、数据访问、缓存、认证、第三方服务集成等。

## 技术栈
- **编程语言**: Kotlin 2.2.0+
- **构建工具**: Gradle (Kotlin DSL)
- **核心框架**: Spring Boot 3.5.0+, Spring Framework 6.2.8+
- **数据库**: MySQL, PostgreSQL, Redis
- **ORM**: MyBatis Plus 3.5.12
- **序列化**: Jackson 2.19.1
- **安全**: JWT, BouncyCastle 1.81
- **API文档**: Knife4j 4.6.0, Swagger 2.2.33
- **微服务**: OpenFeign 13.6, Spring Cloud

## 模块结构

### 核心模块
- **tony-core**: 核心工具类和通用功能
- **tony-interfaces**: 接口定义和常量
- **tony-dependencies**: 依赖版本管理
- **tony-dependencies-catalog**: 依赖目录

### Web相关模块
- **tony-web**: Web框架和通用组件
- **tony-web-auth**: Web认证和授权
- **tony-web-crypto**: Web加密解密
- **tony-knife4j-api**: API文档集成

### 数据访问模块
- **tony-mybatis-plus**: MyBatis Plus增强
- **tony-redis**: Redis缓存集成
- **tony-snowflake-id**: 雪花ID生成器

### 第三方服务模块
- **tony-aliyun-oss**: 阿里云对象存储
- **tony-aliyun-sms**: 阿里云短信服务
- **tony-alipay**: 支付宝支付集成
- **tony-wechat**: 微信服务集成
- **tony-captcha**: 验证码服务

### 微服务模块
- **tony-feign**: OpenFeign服务调用
- **tony-jwt**: JWT认证服务

## 开发规范

### 模块开发原则
- **单一职责**: 每个模块只负责一个特定功能
- **低耦合**: 模块间依赖最小化
- **高内聚**: 模块内部功能紧密相关
- **可复用**: 设计为可复用的组件

### 包结构规范
```
tony-{module}/
├── src/main/kotlin/tony/{module}/
│   ├── config/          # 配置类
│   ├── annotation/      # 自定义注解
│   ├── exception/       # 异常类
│   ├── utils/          # 工具类
│   └── {feature}/      # 功能实现
├── src/main/resources/
│   ├── META-INF/       # Spring Boot自动配置
│   └── application.yml # 默认配置
└── src/test/           # 测试代码
```

### 自动配置规范
- 使用 `@Configuration` 和 `@ConditionalOnClass` 实现自动配置
- 配置类放在 `config` 包下
- 提供默认配置和自定义配置选项
- 使用 `@EnableConfigurationProperties` 绑定配置属性

### 依赖管理
- 使用 Version Catalog 统一管理版本
- 模块间依赖通过 `api()` 暴露公共接口
- 实现依赖通过 `implementation()` 隐藏内部实现
- 测试依赖使用 `testImplementation()`

## 代码规范

### 命名规范
- **模块名**: `tony-{功能名}` (如: `tony-core`, `tony-redis`)
- **包名**: `tony.{功能名}` (如: `tony.core`, `tony.redis`)
- **配置类**: `{功能名}Config` (如: `RedisConfig`, `JwtConfig`)
- **注解**: `@Enable{功能名}` (如: `@EnableTonyBoot`)

### 配置属性规范
- 使用 `@ConfigurationProperties` 绑定配置
- 配置前缀使用 `tony.{功能名}` (如: `tony.redis`, `tony.jwt`)
- 提供合理的默认值
- 支持环境变量覆盖

### 异常处理规范
- 定义模块特定的异常类
- 继承自 `BaseException`
- 提供有意义的错误信息
- 包含错误码和错误描述

### 日志规范
- 使用 SLF4J 进行日志记录
- 不同级别日志合理使用
- 敏感信息不记录日志
- 提供调试信息用于问题排查

## 测试规范

### 单元测试
- 每个公共方法都要有单元测试
- 使用 JUnit 5 + Mockito
- 测试覆盖率 > 80%
- 测试用例命名清晰明了

### 集成测试
- 测试自动配置是否正确加载
- 测试配置属性是否正确绑定
- 测试与其他模块的集成
- 使用 `@SpringBootTest` 进行集成测试

### 测试数据
- 使用测试专用的配置文件
- 提供测试用的数据源
- 测试完成后清理测试数据
- 使用 `@TestConfiguration` 提供测试配置

## 文档规范

### README.md 结构模板

每个模块的 README.md 必须遵循以下统一结构：

````markdown
## 概述

`tony-{module}` 是 `tony-boot-starters` 体系下的 {功能描述} 模块，{核心价值描述}。{主要解决的问题和适用场景}。

## 目录

- [如何使用](#如何使用)
- [主要功能](#主要功能)
  - [功能点1](#1-功能点1)
  - [功能点2](#2-功能点2)
  - [功能点3](#3-功能点3)
- [配置说明](#配置说明)
- [使用示例](#使用示例)
- [进阶用法](#进阶用法)
- [适用场景](#适用场景)
- [注意事项](#注意事项)

## 如何使用

### 环境要求
- **Java 21** 或更高版本
- **Spring Boot 3.x**
- **其他依赖**: {具体版本要求}

### 添加依赖

在 `build.gradle.kts` 中添加依赖：

```kotlin
dependencies {
    implementation("tony:tony-{module}:0.1-SNAPSHOT")
}
```

### 启用模块

在 Spring Boot 应用主类上添加 `@EnableTonyBoot` 注解：

```kotlin
@EnableTonyBoot
@SpringBootApplication
class YourApplication

fun main(args: Array<String>) {
    org.springframework.boot.run(YourApplication::class.java, *args)
}
```

## 主要功能

### 1. 功能点1

- **核心特性描述**：详细说明该功能的核心价值和实现方式
- **技术实现**：简要说明技术实现原理
- **使用场景**：适用的具体业务场景

### 2. 功能点2

- **功能描述**：详细的功能说明
- **配置选项**：相关的配置参数说明
- **代码示例**：简单的使用示例

### 3. 功能点3

- **高级特性**：复杂功能的详细说明
- **扩展能力**：可扩展和自定义的部分
- **最佳实践**：推荐的使用方式

## 配置说明

### 基础配置

```yaml
tony:
  {module}:
    enabled: true
    # 其他配置项
```

## 使用示例

### 基础用法

```kotlin
// 基础使用示例代码
```

### 进阶用法

```kotlin
// 进阶使用示例代码
```

## 进阶用法

### 自定义扩展

```kotlin
// 自定义扩展示例
```
````

### 模块文档
- 每个模块都要有 README.md
- 说明模块的功能和使用方法
- 提供配置示例和代码示例
- 说明依赖关系和版本要求

### API文档
- 公共接口要有详细的文档注释
- 使用 KDoc 格式编写文档
- 提供参数说明和返回值说明
- 包含使用示例和注意事项

### 配置文档
- 列出所有配置属性
- 说明每个属性的作用
- 提供默认值和取值范围
- 包含配置示例

## 发布规范

### 版本管理
- 使用语义化版本号 (如: 1.2.3)
- 主版本号: 不兼容的API修改
- 次版本号: 向下兼容的功能性新增
- 修订号: 向下兼容的问题修正

### 发布流程
- 代码审查通过
- 所有测试通过
- 文档更新完成
- 版本号更新
- 发布到 Maven 仓库

### 兼容性
- 保持向后兼容性
- 废弃的功能要标记 `@Deprecated`
- 提供迁移指南
- 支持多个版本并存

## 性能优化

### 启动性能
- 使用条件注解避免不必要的配置加载
- 延迟初始化非关键组件
- 优化依赖扫描范围
- 使用 Spring Boot 的懒加载机制

### 运行时性能
- 合理使用缓存
- 避免重复计算
- 优化数据库查询
- 使用连接池管理资源

### 内存优化
- 避免内存泄漏
- 合理使用对象池
- 及时释放资源
- 监控内存使用情况

## 安全规范

### 数据安全
- 敏感数据加密存储
- 传输数据使用HTTPS
- 输入数据验证和过滤
- 防止SQL注入和XSS攻击

### 认证授权
- 使用JWT进行身份认证
- 实现细粒度的权限控制
- 支持多种认证方式
- 提供安全的密码策略

### 配置安全
- 敏感配置使用环境变量
- 生产环境配置加密
- 访问日志记录
- 定期安全审计

## 监控和运维

### 健康检查
- 提供健康检查端点
- 检查关键组件的状态
- 提供详细的健康信息
- 支持自定义健康检查

### 指标监控
- 集成 Micrometer 指标收集
- 提供业务指标监控
- 支持 Prometheus 格式
- 配置告警规则

### 日志管理
- 结构化日志输出
- 支持日志聚合
- 提供日志查询接口
- 配置日志轮转策略
