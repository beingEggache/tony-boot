# tony-boot-starters 项目 CursorRules

## 核心原则

- **模块化设计**: 独立、按需集成。
- **Kotlin 优先**: 主要使用 Kotlin，兼容 Java。
- **自动化构建**: 使用 Gradle。遵从统一的目录
- **统一规范**: 【必须】遵循此文件定义的规约。

## 命名约定

| 类别 (Category) | 格式 (Format)      | 占位符 (Placeholder) | 示例 (Example)           |
|---------------|------------------|-------------------|------------------------|
| 模块名           | 全小写，中划线分隔        | `{module}`        | `redis`, `web-support` |
| 模块主类前缀        | 模块名 `PascalCase` | `{Module}`        | `Redis`, `WebSupport`  |
| 包名            | 模块名去中划线          | `{package-name}`  | `redis`, `websupport`  |

---

## 目录结构规范

### Starter 模块标准结构

每个 starter 模块【必须】采用如下标准结构：

```
tony-{module}/
├── build.gradle.kts                   # 模块独立构建脚本
├── README.md                          # 模块详细说明文档
└── src/
    ├── main/
    │   ├── kotlin/
    │   │   └── tony/{package-name}/    # 模块主包 (例如: tony/websupport)
    │   │       ├── config/             # 配置包
    │   │       │   ├── {Module}Config.kt
    │   │       │   └── {Module}Properties.kt
    │   │       ├── service/            # 服务类包 (可选)
    │   │       ├── utils/              # 工具类包 (可选)
    │   │       ├── exception/          # 异常类包 (可选)
    │   │       └── [其他包].../         # 其他包, 根据用户需求添加 (可选)
    │   │
    │   ├── java/                       # Java 源码（可选，用于互操作）
    │   └── resources/
    │       ├── META-INF/
    │       │   └── spring/
    │       │       └── org.springframework.boot.autoconfigure.AutoConfiguration.imports
    │       └── {module}.config.yml # 配置示例（可选）
    └── test/
        ├── kotlin/
        │   └── tony/test/{package-name}/      # 模块测试包
        │       ├── {ClassName}Test...         # 各类单元测试
        │       ├── config/                    # 测试配置包 (可选)
        │       │   └── {Module}TestConfig.kt  # 测试配置类 (可选)
        │       ├── [Module]BaseTest.kt        # 基础测试类 (可选)
        │       ├── {Module}IntegrationTest.kt # 集成测试类 (可选)
        │       └── {Module}TestApplication.kt # 测试启动类 (可选)
        ├── java/                       # Java 测试源码（可选）
        └── resources/                  # 测试资源
```

---

## 注释规范

- 所有公共类、方法、属性、异常等【必须】有注释，描述功能、参数、返回值、异常等关键信息。
- 所有类、方法、字段、DTO 属性等都【必须】根据具体情况使用如下标准注释模板，不能只写一句话。
- @date 字段请自动填入生成代码时的当前系统时间，格式为 yyyy/MM/dd HH:mm。

```kotlin
/**
 * 类/方法/属性功能描述
 *
 * 详细说明/代码示例/场景说明
 *
 * @param [paramName] 参数说明
 * @return [ReturnType] 返回值说明
 * @throws [ExceptionType] 异常说明
 * @author 作者
 * @date 2025/07/04 14:00 （此处为生成时系统时间）
 */
```

---

## Java 互操作注意事项

- 工具类文件可用 `@file:JvmName` 提供Java友好类名。
- 关键API可用 `@JvmStatic`、`@JvmOverloads` 提供静态方法和重载。
- Kotlin扩展/内部API可用 `@JvmSynthetic` 隐藏，避免Java调用。
- 类型别名可用于简化复杂泛型。

```kotlin
@file:JvmName("Strs")
object Strs {
    @JvmStatic
    fun isBlank(str: String?): Boolean = str == null || str.isBlank()
}
```

---

## 枚举使用规范

- 所有枚举实现统一接口（如EnumValue<T>），value字段唯一，需有默认值

| 类型     | 接口              | value类型 | 默认值常量                | Creator基类         |
|--------|-----------------|---------|----------------------|-------------------|
| Int    | IntEnumValue    | Int     | DEFAULT_INT_VALUE    | IntEnumCreator    |
| String | StringEnumValue | String  | DEFAULT_STRING_VALUE | StringEnumCreator |

**标准模板：**

```kotlin
enum class ExampleEnum(override val value: Int) : IntEnumValue {
    VALUE1(1),
    VALUE2(2),

    @JsonEnumDefaultValue
    UNUSED(DEFAULT_INT_VALUE);

    companion object : IntEnumCreator(ExampleEnum::class.java) {
        @JsonCreator
        @JvmStatic
        override fun create(value: Int) = super.create(value)
    }
}
```

##### 【强制】枚举字段类型规范

- 所有具有明确枚举语义的字段, 【必须】直接使用对应的枚举类型，**禁止**使用原始类型（如 `Int`、`String`）。

```kotlin
// 正确
var encoding: Encoding = Encoding.HEX

// 错误
var encoding: String = "HEX"

```

---

## 自动装配规范

- 每个功能模块单独配置类，【必须】命名为 `{Module}Config`，包路径【必须】为 `tony.{module}.config`
- 推荐注解组合：`@Configuration` + `@EnableConfigurationProperties({Module}Properties::class)` +
  `@ConditionalOnProperty` + `@ConditionalOnMissingBean`
- 属性类用 `@ConfigurationProperties` + `data class`，字段建议有Kotlin默认值
- 每个自动装配类【必须】注册到 `META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports`
  ，每行一个全限定类名

**标准模板：**

```kotlin
@Configuration
@EnableConfigurationProperties({Module} Properties ::class)
@ConditionalOnProperty(prefix = "tony.{module}", name = ["enabled"], havingValue = "true", matchIfMissing = true) // 可选,并不一定每个都需要
class {Module}Config(val properties: {Module}Properties) {

    @ConditionalOnMissingBean({Module}Service ::class)
    @Bean
    fun {module}Service() = {Module}Service(properties)
}

@ConfigurationProperties(prefix = "tony.{module}")
data class {Module}Properties(
    val enabled: Boolean = true,
    val name: String = "default",
)
```

---

### 统一入口注解

**启用注解：**

- 使用 `@EnableTonyBoot` 作为统一入口
- 支持一键启用所有 tony-boot-starters 功能

---

## 测试规范

### 1. 测试类组织规范

**测试类注解：**

```kotlin
@DisplayName("测试类名称")
class {ClassName}Test {
    // 测试方法
}
```

**嵌套测试结构：**

```kotlin
@Nested
@DisplayName("功能模块测试")
inner class {Feature}Test {
    @Test
    @DisplayName("具体测试场景")
    fun test{Scenario}() {
        // 测试逻辑
    }
}
```

### 2. 测试方法编写规范

**单元测试方法：**

```kotlin
@Test
@DisplayName("方法名():测试场景描述")
fun test{MethodName}{Scenario}() {
    // Given - 准备测试数据
    val input = "test"

    // When - 执行被测试方法
    val result = input.methodName()

    // Then - 验证结果
    assertEquals(expected, result)
}
```

**参数化测试：**

```kotlin
@ParameterizedTest
@ValueSource(strings = ["value1", "value2", "value3"])
@DisplayName("方法名():参数化测试")
fun test{MethodName}With{Type}(value: String) {
    val result = value.methodName()
    assertTrue(result.isValid())
}
```

**异常测试：**

```kotlin
@Test
@DisplayName("方法名():异常情况")
fun test{MethodName}WithException() {
    assertThrows<IllegalArgumentException> {
        methodName(invalidInput)
    }
}
```

### 3. 集成测试规范

**基础测试类：**

```kotlin
@SpringBootTest(
    classes = [{Module}TestApplication ::class],
    webEnvironment = SpringBootTest.WebEnvironment.NONE
)
@ActiveProfiles("test")
@TestPropertySource(locations = ["classpath:application.yml"])
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
abstract class {Module}BaseTest {
    // 一些方便测试的基础方法.
}
```

**测试应用配置：**

```kotlin
@SpringBootApplication
@EnableTonyBoot
@Import({Module}TestConfig ::class)
class {Module}TestApplication
```

### 4. 断言使用规范

所有测试断言【必须】使用 org.junit.jupiter.api 包下的方法，不得使用其他断言库。

### 5. 测试覆盖范围规范

**必须测试的场景：**

- 正常流程测试
- 边界条件测试
- 异常情况测试

---

## 导入规范

- 导入顺序：标准库 → 第三方库 → 项目内部。
- 【禁止】通配符导入，所有导入必须为显式导入。

```kotlin
import java.util.UUID
import org.springframework.util.AntPathMatcher
import {company}.{projectName}.core.ApiResult
// ❌ import java.util.*  // 禁止
```

---

## 异常抛出规范

- 优先用工具函数抛出异常，如throwIfNull、throwIfTrue等
- 所有自定义异常继承BaseException，分ApiException/BizException

**标准结构：**

```kotlin
open class BaseException(message: String?, val code: Int, cause: Throwable? = null) : RuntimeException(message, cause)
open class ApiException(message: String?, code: Int = ApiProperty.errorCode, cause: Throwable? = null) : BaseException(message, code, cause)
open class BizException(message: String, code: Int = ApiProperty.preconditionFailedCode) : BaseException(message, code)
```

**工具函数示例：**

```kotlin
value.throwIfNull("不能为空")
condition.throwIfTrue("条件不满足")
```

---

## 文档规范

### README.md 结构模板

每个模块的 README.md 必须遵循以下统一结构：

````markdown
## 概述

`tony-{module}` 是 `tony-boot-starters` 体系下的 {功能描述} 模块，{核心价值描述}。{主要解决的问题和适用场景}。

## 目录

- [如何使用](#如何使用)
- [主要功能](#主要功能)
    - [功能点1](#1-功能点1)
    - [功能点2](#2-功能点2)
    - [功能点3](#3-功能点3)
- [配置说明](#配置说明)
- [使用示例](#使用示例)
- [进阶用法](#进阶用法)
- [适用场景](#适用场景)
- [注意事项](#注意事项)

## 如何使用

### 环境要求

- **Java 21** 或更高版本
- **Spring Boot 3.x**
- **其他依赖**: {具体版本要求}

### 添加依赖

在 `build.gradle.kts` 中添加依赖：

```kotlin
dependencies {
    implementation("tony:tony-{module}:0.1-SNAPSHOT")
}
```

### 启用模块

在 Spring Boot 应用主类上添加 `@EnableTonyBoot` 注解：

```kotlin
@EnableTonyBoot
@SpringBootApplication
class YourApplication
```

## 主要功能

### 1. 功能点1

### 2. 功能点2

### 3. 功能点3

## 配置说明

- 列出所有配置属性
- 说明每个属性的作用
- 提供默认值和取值范围
- 包含配置示例

### 基础配置

## 使用示例

### 基础用法

## 进阶用法

````

---
