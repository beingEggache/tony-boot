# MIT License
#
# Copyright (c) 2023-present, tangli
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

[versions]
template = "0.1-SNAPSHOT"
java = "21"
kotlin = "1.9.23"
spring = "6.1.5"
springBoot = "3.2.3"

slf4j = "2.0.12"
logstashLogbackEncoder = "7.4"

byteBuddy = "1.14.12"
bouncycastle = "1.77"

openFeign = "13.2.1"
lettuce = "6.3.1.RELEASE"

jackson = "2.16.2"
gson = "2.10.1"
fastjson = "2.0.47"

postgresql = "42.7.2"
mysql = "8.3.0"

hikariCP = "5.1.0"
mybatis = "3.5.15"
mybatisSpring = "3.0.3"
mybatisPlus = "3.5.5"

javaJwt = "4.4.0"
guava = "33.0.0-jre"

validationApi = "3.0.2"
annotationApi = "2.1.1"
activationApi = "2.1.2"
elApi = "5.0.1"
websocketApi = "2.1.1"
bindApi = "4.0.1"

swagger = "2.2.20"
knife4j = "4.5.0"
springdoc = "1.7.0"
springdocStarter = "2.3.0"

fury = "0.4.1"

powerjob = "4.3.9"
vertx = "4.5.4"

springCloud = "2023.0.0"
springCloudAlibaba = "2022.0.0.0"
springCloudTencent = "1.13.1-2023.0.0"
reactor = "2023.0.4"
netty = "4.1.107.Final"

lombok = "8.6"
ktlint = "1.2.1"
graalvm = "0.10.1"
dokka = "1.9.20"

[libraries]
jacksonBom = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
jacksonDatatypeJdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8" }
jacksonDatatypeJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" }
jacksonModuleKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }
jacksonModuleParameterNames = { module = "com.fasterxml.jackson.module:jackson-module-parameter-names" }

knife4jCore = { module = "com.github.xiaoymin:knife4j-core", version.ref = "knife4j" }
knife4jOpenapi3SpringBootStarter = { module = "com.github.xiaoymin:knife4j-openapi3-spring-boot-starter", version.ref = "knife4j" }
knife4jOpenapi3JakartaSpringBootStarter = { module = "com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter", version.ref = "knife4j" }
knife4jOpenapi3Ui = { module = "com.github.xiaoymin:knife4j-openapi3-ui", version.ref = "knife4j" }
knife4jGatewaySpringBootStarter = { module = "com.github.xiaoymin:knife4j-gateway-spring-boot-starter", version.ref = "knife4j" }

kotlinBom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlinStdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib" }

openFeignCore = { module = "io.github.openfeign:feign-core", version.ref = "openFeign" }
openFeignSl4j = { module = "io.github.openfeign:feign-slf4j", version.ref = "openFeign" }
openFeignOkhttp = { module = "io.github.openfeign:feign-okhttp", version.ref = "openFeign" }
openFeignJackson = { module = "io.github.openfeign:feign-jackson", version.ref = "openFeign" }

lettuce = { module = "io.lettuce:lettuce-core", version.ref = "lettuce" }

postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
mysql = { module = "com.mysql:mysql-connector-j", version.ref = "mysql" }
hikariCP = { module = "com.zaxxer:HikariCP", version.ref = "hikariCP" }

mybatis = { module = "org.mybatis:mybatis", version.ref = "mybatis" }
mybatisSpring = { module = "org.mybatis:mybatis-spring", version.ref = "mybatisSpring" }
mybatisPlusAnnotation = { module = "com.baomidou:mybatis-plus-annotation", version.ref = "mybatisPlus" }
mybatisPlusExtension = { module = "com.baomidou:mybatis-plus-extension", version.ref = "mybatisPlus" }
mybatisPlusBootStarter = { module = "com.baomidou:mybatis-plus-boot-starter", version.ref = "mybatisPlus" }
mybatisPlusBootStarter3 = { module = "com.baomidou:mybatis-plus-spring-boot3-starter", version.ref = "mybatisPlus" }
mybatisPlusGenerator = { module = "com.baomidou:mybatis-plus-generator", version.ref = "mybatisPlus" }
mybatisTypehandlersJsr310 = { module = "org.mybatis:mybatis-typehandlers-jsr310", version = "1.0.2" }

validationApi = { module = "jakarta.validation:jakarta.validation-api", version.ref = "validationApi" }
annotationApi = { module = "jakarta.annotation:jakarta.annotation-api", version.ref = "annotationApi" }
activationApi = { module = "jakarta.activation:jakarta.activation-api", version.ref = "activationApi" }
elApi = { module = "jakarta.el:jakarta.el-api", version.ref = "elApi" }
websocketApi = { module = "jakarta.websocket:jakarta.websocket-api", version.ref = "websocketApi" }
bindApi = { module = "jakarta.xml.bind:jakarta.xml.bind-api", version.ref = "bindApi" }

gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
fastjson = { module = "com.alibaba:fastjson", version.ref = "fastjson" }
xstream = { module = "com.thoughtworks.xstream:xstream", version = "1.4.20" }
httpclient = { module = "org.apache.httpcomponents:httpclient", version = "4.5.14" }
httpcore = { module = "org.apache.httpcomponents:httpcore", version = "4.4.16" }
httpcoreNio = { module = "org.apache.httpcomponents:httpcore-nio", version = "4.4.16" }
httpasyncclient = { module = "org.apache.httpcomponents:httpasyncclient", version = "4.1.5" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version = "4.12.0" }
okioJvm = { module = "com.squareup.okio:okio-jvm", version = "3.8.0" }
commonsFileUpload = { module = "commons-fileupload:commons-fileupload", version = "1.5" }
commonsCodec = { module = "commons-codec:commons-codec", version = "1.16.1" }
commonsIo = { module = "commons-io:commons-io", version = "2.15.1" }
commonsCompress = { module = "org.apache.commons:commons-compress", version = "1.26.1" }
commonsPool2 = { module = "org.apache.commons:commons-pool2", version = "2.12.0" }
commonsLang3 = { module = "org.apache.commons:commons-lang3", version = "3.14.0" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
findbugsJsr305 = { module = "com.google.code.findbugs:jsr305", version = "3.0.2" }
findbugsAnnotations = { module = "com.google.code.findbugs:annotations", version = "3.0.1" }
javaJwt = { module = "com.auth0:java-jwt", version.ref = "javaJwt" }

slf4jApi = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
julToSlf4j = { module = "org.slf4j:jul-to-slf4j", version.ref = "slf4j" }
jclOverSlf4j = { module = "org.slf4j:jcl-over-slf4j", version.ref = "slf4j" }
logstashLogbackEncoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstashLogbackEncoder" }

byteBuddy = { module = "net.bytebuddy:byte-buddy", version.ref = "byteBuddy" }
byteBuddyAgent = { module = "net.bytebuddy:byte-buddy-agent", version.ref = "byteBuddy" }
jasypt = { module = "org.jasypt:jasypt", version = "1.9.3" }
bcprovJdk18On = { module = "org.bouncycastle:bcprov-jdk18on", version.ref = "bouncycastle" }
bcpkixJdk18On = { module = "org.bouncycastle:bcpkix-jdk18on", version.ref = "bouncycastle" }
bctlsJdk18On = { module = "org.bouncycastle:bctls-jdk18on", version.ref = "bouncycastle" }
bcmailJdk18On = { module = "org.bouncycastle:bcmail-jdk18on", version.ref = "bouncycastle" }
bctspJdk15On = { module = "org.bouncycastle:bctsp-jdk15on", version = "1.46" }
classmate = { module = "com.fasterxml:classmate", version = "1.7.0" }

reactorKotlinExtensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions", version = "1.2.2" }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version = "3.1.8" }

swaggerV3Annotaion = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "swagger" }
swaggerV3Core = { module = "io.swagger.core.v3:swagger-core", version.ref = "swagger" }
swaggerV3Models = { module = "io.swagger.core.v3:swagger-models", version.ref = "swagger" }
swaggerV3AnnotaionJarkarta = { module = "io.swagger.core.v3:swagger-annotations-jarkarta", version.ref = "swagger" }
swaggerV3CoreJarkarta = { module = "io.swagger.core.v3:swagger-core-jarkarta", version.ref = "swagger" }
swaggerV3ModelsJarkarta = { module = "io.swagger.core.v3:swagger-models-jarkarta", version.ref = "swagger" }

springdocUi = { module = "org.springdoc:springdoc-openapi-ui", version.ref = "springdoc" }
springdocCommon = { module = "org.springdoc:springdoc-openapi-common", version.ref = "springdoc" }
springdocStarterCommon = { module = "org.springdoc:springdoc-openapi-starter-common", version.ref = "springdocStarter" }
springdocKotlin = { module = "org.springdoc:springdoc-openapi-kotlin", version.ref = "springdoc" }

snakeYaml = { module = "org.yaml:snakeyaml", version = "2.2" }

yitterIdgenerator = { module = "com.github.yitter:yitter-idgenerator", version = "1.0.6" }
easyCaptcha = { module = "com.github.whvcse:easy-captcha", version = "1.6.2" }

springBom = { module = "org.springframework:spring-framework-bom", version.ref = "spring" }
springContext = { module = "org.springframework:spring-context" }
springContextIndexer = { module = "org.springframework:spring-context-indexer", version.ref = "spring" }
springWeb = { module = "org.springframework:spring-web" }

springCloudTencentDependencies = { module = "com.tencent.cloud:spring-cloud-tencent-dependencies", version.ref = "springCloudTencent" }
springCloudAlibabaDenpendencies = { module = "com.alibaba.cloud:spring-cloud-alibaba-dependencies", version.ref = "springCloudAlibaba" }
springCloudDependencies = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloud" }
reactorBom = { module = "io.projectreactor:reactor-bom", version.ref = "reactor" }
nettyBom = { module = "io.netty:netty-bom", version.ref = "netty" }

springBootDependencies = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springBoot" }
springBoot = { module = "org.springframework.boot:spring-boot" }
springBootAutoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure" }
springBootStarter = { module = "org.springframework.boot:spring-boot-starter" }
springBootStarterActuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
springBootStarterAmqp = { module = "org.springframework.boot:spring-boot-starter-amqp" }
springBootStarterAop = { module = "org.springframework.boot:spring-boot-starter-aop" }
springBootStarterJson = { module = "org.springframework.boot:spring-boot-starter-json" }
springBootStarterLogging = { module = "org.springframework.boot:spring-boot-starter-logging" }
springBootDevtools = { module = "org.springframework.boot:spring-boot-devtools" }
springBootStarterUndertow = { module = "org.springframework.boot:spring-boot-starter-undertow" }
springBootStarterValidation = { module = "org.springframework.boot:spring-boot-starter-validation" }
springBootStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web" }
springBootStarterDataRedis = { module = "org.springframework.boot:spring-boot-starter-data-redis" }
springBootStarterDataRedisReactive = { module = "org.springframework.boot:spring-boot-starter-data-redis-reactive" }

springBootConfigurationProcessor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "springBoot" }
springBootAutoconfigureProcessor = { module = "org.springframework.boot:spring-boot-autoconfigure-processor", version.ref = "springBoot" }
springBootStarterTest = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "springBoot" }

furyCore = { module = "org.furyio:fury-core", version.ref = "fury" }
furyFormat = { module = "org.furyio:fury-format", version.ref = "fury" }

aliyunJavaSdkCore = { module = "com.aliyun:aliyun-java-sdk-core", version = "4.6.4" }

powerjobWorkerSpringBootStarter = { module = "tech.powerjob:powerjob-worker-spring-boot-starter", version.ref = "powerjob" }
powerjobWorker = { module = "tech.powerjob:powerjob-worker", version.ref = "powerjob" }
powerjobOfficialProcessors = { module = "tech.powerjob:powerjob-official-processors", version.ref = "powerjob" }

vertxCore = { module = "io.vertx:vertx-core", version.ref = "vertx" }
vertxWeb = { module = "io.vertx:vertx-web", version.ref = "vertx" }
vertxWebCommon = { module = "io.vertx:vertx-web-common", version.ref = "vertx" }
vertxAuthCommon = { module = "io.vertx:vertx-auth-common", version.ref = "vertx" }
vertxBridgeCommon = { module = "io.vertx:vertx-bridge-common", version.ref = "vertx" }

gradleDocker = { module = "com.palantir.gradle.docker:gradle-docker", version = "0.35.0"}
springBootGradlePlugin = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "springBoot"}
ktlint = { module = "com.pinterest.ktlint:ktlint-cli", version.ref="ktlint"}

[plugins]
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinSpring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlinNoarg = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "kotlin" }
kotlinKapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
lombok = { id="io.freefair.lombok", version.ref = "lombok" }
graalvm = { id="org.graalvm.buildtools.native", version.ref = "graalvm" }

tonyGradleBuild = { id = "com.tony.gradle.plugin.build", version.ref="template"}
tonyDepConfigurations = { id = "com.tony.gradle.plugin.dep-configurations", version.ref="template"}
tonyKtlint = { id = "com.tony.gradle.plugin.ktlint", version.ref="template"}
tonyMavenPublish = { id = "com.tony.gradle.plugin.maven-publish", version.ref="template"}
tonyDocker = { id = "com.tony.gradle.plugin.docker", version.ref="template"}

[bundles]
test = ["springBootStarterTest"]
springBootProcessors = ["springBootConfigurationProcessor", "springBootAutoconfigureProcessor", "springContextIndexer"]
