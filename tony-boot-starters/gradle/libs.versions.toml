# MIT License
#
# Copyright (c) 2023-present, tangli
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

[versions]
template = "0.1-SNAPSHOT"
java = "21"
kotlin = "2.1.20"
spring = "6.2.6"
springBoot = "3.4.5"

slf4j = "2.0.17"

byteBuddy = "1.17.5"
bouncycastle = "1.80"

openFeign = "13.6"
lettuce = "6.6.0.RELEASE"

jackson = "2.19.0"
gson = "2.13.1"
fastjson = "2.0.57"

postgresql = "42.7.5"
mysql = "9.3.0"

hikariCP = "6.3.0"
mybatis = "3.5.19"
mybatisSpring = "3.0.4"
mybatisPlus = "3.5.12"

guava = "33.4.8-jre"

swagger = "2.2.30"
knife4j = "4.6.0"
springdocStarter = "2.8.6"

powerjob = "5.1.1"
vertx = "4.5.12"
xnio = "3.8.16.Final"

springCloud = "2024.0.1"
springCloudAlibaba = "2023.0.3.2"
springCloudTencent = "1.13.2-2023.0.0"
reactor = "2024.0.5"
netty = "4.2.0.Final"
grpc = "1.72.0"
protobuf = "4.30.2"

grpcSpringBoot = "3.1.0.RELEASE"

lombok = "8.10"
ktlint = "1.5.0"
graalvm = "0.10.2"
dokka = "2.0.0"

[libraries]
kotlinBom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlinStdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
annotations = { module = "org.jetbrains:annotations", version = "26.0.2" }

springBom = { module = "org.springframework:spring-framework-bom", version.ref = "spring" }
springContext = { module = "org.springframework:spring-context", version.ref = "spring" }
springContextIndexer = { module = "org.springframework:spring-context-indexer", version.ref = "spring" }
springWeb = { module = "org.springframework:spring-web", version.ref = "spring" }
springJcl = { module = "org.springframework:spring-jcl", version.ref = "spring" }

springBootDependencies = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springBoot" }
springBoot = { module = "org.springframework.boot:spring-boot", version.ref = "springBoot" }
springBootAutoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "springBoot" }
springBootStarter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "springBoot" }
springBootStarterActuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "springBoot" }
springBootStarterAmqp = { module = "org.springframework.boot:spring-boot-starter-amqp", version.ref = "springBoot" }
springBootStarterAop = { module = "org.springframework.boot:spring-boot-starter-aop", version.ref = "springBoot" }
springBootStarterJson = { module = "org.springframework.boot:spring-boot-starter-json", version.ref = "springBoot" }
springBootStarterLogging = { module = "org.springframework.boot:spring-boot-starter-logging", version.ref = "springBoot" }
springBootDevtools = { module = "org.springframework.boot:spring-boot-devtools", version.ref = "springBoot" }
springBootStarterUndertow = { module = "org.springframework.boot:spring-boot-starter-undertow", version.ref = "springBoot" }
springBootStarterValidation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "springBoot" }
springBootStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "springBoot" }
springBootStarterDataRedis = { module = "org.springframework.boot:spring-boot-starter-data-redis", version.ref = "springBoot" }
springBootStarterDataRedisReactive = { module = "org.springframework.boot:spring-boot-starter-data-redis-reactive", version.ref = "springBoot" }

springBootConfigurationProcessor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "springBoot" }
springBootAutoconfigureProcessor = { module = "org.springframework.boot:spring-boot-autoconfigure-processor", version.ref = "springBoot" }
springBootStarterTest = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "springBoot" }
springBootGradlePlugin = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "springBoot"}

springCloudTencentDependencies = { module = "com.tencent.cloud:spring-cloud-tencent-dependencies", version.ref = "springCloudTencent" }
springCloudAlibabaDenpendencies = { module = "com.alibaba.cloud:spring-cloud-alibaba-dependencies", version.ref = "springCloudAlibaba" }
springCloudDependencies = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloud" }

jacksonBom = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
jacksonDatatypeJdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "jackson" }
jacksonDatatypeJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jacksonModuleKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jacksonModuleParameterNames = { module = "com.fasterxml.jackson.module:jackson-module-parameter-names", version.ref = "jackson" }

nettyBom = { module = "io.netty:netty-bom", version.ref = "netty" }

reactorBom = { module = "io.projectreactor:reactor-bom", version.ref = "reactor" }

knife4jCore = { module = "com.github.xingfudeshi:knife4j-core", version.ref = "knife4j" }
knife4jOpenapi3SpringBootStarter = { module = "com.github.xingfudeshi:knife4j-openapi3-spring-boot-starter", version.ref = "knife4j" }
knife4jOpenapi3JakartaSpringBootStarter = { module = "com.github.xingfudeshi:knife4j-openapi3-jakarta-spring-boot-starter", version.ref = "knife4j" }
knife4jOpenapi3Ui = { module = "com.github.xingfudeshi:knife4j-openapi3-ui", version.ref = "knife4j" }
knife4jGatewaySpringBootStarter = { module = "com.github.xingfudeshi:knife4j-gateway-spring-boot-starter", version.ref = "knife4j" }

protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }
protobufJava = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobufJavalite = { module = "com.google.protobuf:protobuf-javalite", version.ref = "protobuf" }
protobufJavaUtil = { module = "com.google.protobuf:protobuf-java-util", version.ref = "protobuf" }
protobufKotlin = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "protobuf" }
protobufKotlinLite = { module = "com.google.protobuf:protobuf-kotlin-lite", version.ref = "protobuf" }

grpcBom = { module = "io.grpc:grpc-bom", version.ref = "grpc" }
grpcApi = { module = "io.grpc:grpc-api", version.ref = "grpc" }
grpcCore = { module = "io.grpc:grpc-core", version.ref = "grpc" }
grpcUtil = { module = "io.grpc:grpc-util", version.ref = "grpc" }
grpcContext = { module = "io.grpc:grpc-context", version.ref = "grpc" }
grpcStub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpcProtobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpcProtobufLite = { module = "io.grpc:grpc-protobuf-lite", version.ref = "grpc" }
grpcNetty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
grpcNettyShaded = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
grpcOkhttp = { module = "io.grpc:grpc-okhttp", version.ref = "grpc" }

protocGenGrpcJava = { module = "io.grpc:protoc-gen-grpc-java", version.ref = "grpc" }

grpcSpringBootStarter = { module = "net.devh:grpc-spring-boot-starter", version.ref = "grpcSpringBoot" }
grpcServerSpringBootStarter = { module = "net.devh:grpc-server-spring-boot-starter", version.ref = "grpcSpringBoot" }
grpcClientSpringBootStarter = { module = "net.devh:grpc-client-spring-boot-starter", version.ref = "grpcSpringBoot" }

openFeignCore = { module = "io.github.openfeign:feign-core", version.ref = "openFeign" }
openFeignSl4j = { module = "io.github.openfeign:feign-slf4j", version.ref = "openFeign" }
openFeignOkhttp = { module = "io.github.openfeign:feign-okhttp", version.ref = "openFeign" }
openFeignJackson = { module = "io.github.openfeign:feign-jackson", version.ref = "openFeign" }

lettuce = { module = "io.lettuce:lettuce-core", version.ref = "lettuce" }

postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
mysql = { module = "com.mysql:mysql-connector-j", version.ref = "mysql" }
hikariCP = { module = "com.zaxxer:HikariCP", version.ref = "hikariCP" }

gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
fastjson = { module = "com.alibaba:fastjson", version.ref = "fastjson" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }

mybatis = { module = "org.mybatis:mybatis", version.ref = "mybatis" }
mybatisSpring = { module = "org.mybatis:mybatis-spring", version.ref = "mybatisSpring" }
mybatisPlusAnnotation = { module = "com.baomidou:mybatis-plus-annotation", version.ref = "mybatisPlus" }
mybatisPlusExtension = { module = "com.baomidou:mybatis-plus-extension", version.ref = "mybatisPlus" }
mybatisPlusBootStarter = { module = "com.baomidou:mybatis-plus-boot-starter", version.ref = "mybatisPlus" }
mybatisPlusBootStarter3 = { module = "com.baomidou:mybatis-plus-spring-boot3-starter", version.ref = "mybatisPlus" }
mybatisPlusGenerator = { module = "com.baomidou:mybatis-plus-generator", version.ref = "mybatisPlus" }
mybatisPlusJsqlparser = { module = "com.baomidou:mybatis-plus-jsqlparser", version.ref = "mybatisPlus" }

slf4jApi = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
julToSlf4j = { module = "org.slf4j:jul-to-slf4j", version.ref = "slf4j" }
jclOverSlf4j = { module = "org.slf4j:jcl-over-slf4j", version.ref = "slf4j" }

byteBuddy = { module = "net.bytebuddy:byte-buddy", version.ref = "byteBuddy" }
byteBuddyAgent = { module = "net.bytebuddy:byte-buddy-agent", version.ref = "byteBuddy" }
bcprovJdk18On = { module = "org.bouncycastle:bcprov-jdk18on", version.ref = "bouncycastle" }
bcpkixJdk18On = { module = "org.bouncycastle:bcpkix-jdk18on", version.ref = "bouncycastle" }
bctlsJdk18On = { module = "org.bouncycastle:bctls-jdk18on", version.ref = "bouncycastle" }
bcmailJdk18On = { module = "org.bouncycastle:bcmail-jdk18on", version.ref = "bouncycastle" }

swaggerV3CoreJakarta = { module = "io.swagger.core.v3:swagger-core-jakarta", version.ref = "swagger" }
swaggerV3AnnotaionJakarta = { module = "io.swagger.core.v3:swagger-annotations-jakarta", version.ref = "swagger" }
swaggerV3ModelsJakarta = { module = "io.swagger.core.v3:swagger-models-jakarta", version.ref = "swagger" }

springdocStarterCommon = { module = "org.springdoc:springdoc-openapi-starter-common", version.ref = "springdocStarter" }
springdocStarterWebmvcApi = { module = "org.springdoc:springdoc-openapi-starter-webmvc-api", version.ref = "springdocStarter" }
springdocStarterWebmvcUi = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdocStarter" }

powerjobWorkerSpringBootStarter = { module = "tech.powerjob:powerjob-worker-spring-boot-starter", version.ref = "powerjob" }
powerjobWorker = { module = "tech.powerjob:powerjob-worker", version.ref = "powerjob" }
powerjobOfficialProcessors = { module = "tech.powerjob:powerjob-official-processors", version.ref = "powerjob" }

vertxCore = { module = "io.vertx:vertx-core", version.ref = "vertx" }
vertxWeb = { module = "io.vertx:vertx-web", version.ref = "vertx" }
vertxWebCommon = { module = "io.vertx:vertx-web-common", version.ref = "vertx" }
vertxAuthCommon = { module = "io.vertx:vertx-auth-common", version.ref = "vertx" }
vertxBridgeCommon = { module = "io.vertx:vertx-bridge-common", version.ref = "vertx" }

xnioApi = { module = "org.jboss.xnio:xnio-api", version.ref = "xnio" }
xnioNio = { module = "org.jboss.xnio:xnio-nio", version.ref = "xnio" }

ktlint = { module = "com.pinterest.ktlint:ktlint-cli", version.ref="ktlint"}

validationApi = { module = "jakarta.validation:jakarta.validation-api", version = "3.1.1" }
annotationApi = { module = "jakarta.annotation:jakarta.annotation-api", version = "3.0.0" }
activationApi = { module = "jakarta.activation:jakarta.activation-api", version = "2.1.3" }
elApi = { module = "jakarta.el:jakarta.el-api", version = "6.0.1" }
websocketApi = { module = "jakarta.websocket:jakarta.websocket-api", version = "2.2.0" }
bindApi = { module = "jakarta.xml.bind:jakarta.xml.bind-api", version = "4.0.2" }

tomcatEmbedEl = { module = "org.apache.tomcat.embed:tomcat-embed-el", version = "11.0.6" }

commonsFileUpload = { module = "commons-fileupload:commons-fileupload", version = "1.5" }
commonsCodec = { module = "commons-codec:commons-codec", version = "1.18.0" }
commonsIo = { module = "commons-io:commons-io", version = "2.19.0" }
commonsCompress = { module = "org.apache.commons:commons-compress", version = "1.27.1" }
commonsPool2 = { module = "org.apache.commons:commons-pool2", version = "2.12.1" }
commonsLang3 = { module = "org.apache.commons:commons-lang3", version = "3.17.0" }

httpclient = { module = "org.apache.httpcomponents:httpclient", version = "4.5.14" }
httpcore = { module = "org.apache.httpcomponents:httpcore", version = "4.4.16" }
httpcoreNio = { module = "org.apache.httpcomponents:httpcore-nio", version = "4.4.16" }
httpasyncclient = { module = "org.apache.httpcomponents:httpasyncclient", version = "4.1.5" }

okhttp = { module = "com.squareup.okhttp3:okhttp", version = "4.12.0" }
okioJvm = { module = "com.squareup.okio:okio-jvm", version = "3.11.0" }

javaJwt = { module = "com.auth0:java-jwt", version = "4.5.0" }
jasypt = { module = "org.jasypt:jasypt", version = "1.9.3" }
logstashLogbackEncoder = { module = "net.logstash.logback:logstash-logback-encoder", version = "8.1" }
mybatisTypehandlersJsr310 = { module = "org.mybatis:mybatis-typehandlers-jsr310", version = "1.0.2" }

xstream = { module = "com.thoughtworks.xstream:xstream", version = "1.4.21" }
xmlunitCore = { module = "org.xmlunit:xmlunit-core", version = "2.10.0" }

dom4j = { module = "org.dom4j:dom4j", version = "2.1.4" }
findbugsJsr305 = { module = "com.google.code.findbugs:jsr305", version = "3.0.2" }
findbugsAnnotations = { module = "com.google.code.findbugs:annotations", version = "3.0.1" }

classmate = { module = "com.fasterxml:classmate", version = "1.7.0" }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version = "3.2.0" }

snakeYaml = { module = "org.yaml:snakeyaml", version = "2.4" }

yitterIdgenerator = { module = "com.github.yitter:yitter-idgenerator", version = "1.0.6" }
easyCaptcha = { module = "com.github.whvcse:easy-captcha", version = "1.6.2" }

aliyunJavaSdkCore = { module = "com.aliyun:aliyun-java-sdk-core", version = "4.7.5" }
gradleDocker = { module = "com.palantir.gradle.docker:gradle-docker", version = "0.37.0"}

[plugins]
javaPlatform = { id = "org.gradle.java-platform" }
versionCatalog = { id = "org.gradle.version-catalog" }
protobuf = { id="com.google.protobuf", version = "0.9.4" }
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinSpring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlinNoarg = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "kotlin" }
kotlinKapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
lombok = { id="io.freefair.lombok", version.ref = "lombok" }
graalvm = { id="org.graalvm.buildtools.native", version.ref = "graalvm" }

gradleVersionsPlugin = { id = "com.github.ben-manes.versions", version = "0.52.0" }
dependencyAnalysis = { id = "com.autonomousapps.dependency-analysis", version = "2.0.0" }

licenser = { id = "org.cadixdev.licenser", version = "0.6.1" }

tonyGradleBuild = { id = "com.tony.gradle.plugin.build", version.ref="template"}
tonyDepConfigurations = { id = "com.tony.gradle.plugin.dep-configurations", version.ref="template"}
tonyKtlint = { id = "com.tony.gradle.plugin.ktlint", version.ref="template"}
tonyMavenPublish = { id = "com.tony.gradle.plugin.maven-publish", version.ref="template"}
tonyDocker = { id = "com.tony.gradle.plugin.docker", version.ref="template"}

[bundles]
test = ["springBootStarterTest"]
springBootProcessors = ["springBootConfigurationProcessor", "springBootAutoconfigureProcessor", "springContextIndexer"]
